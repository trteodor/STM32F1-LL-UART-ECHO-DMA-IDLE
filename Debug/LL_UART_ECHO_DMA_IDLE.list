
LL_UART_ECHO_DMA_IDLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002600  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002750  08002750  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002750  08002750  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002750  08002750  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002750  08002750  00012750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000003c  08002794  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  08002794  00020ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075dd  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e29  00000000  00000000  00027642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00029470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  00029bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018335  00000000  00000000  0002a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008824  00000000  00000000  000425ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085564  00000000  00000000  0004add1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf0  00000000  00000000  000d0388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026f4 	.word	0x080026f4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	080026f4 	.word	0x080026f4

0800014c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f003 0310 	and.w	r3, r3, #16
 800015c:	2b10      	cmp	r3, #16
 800015e:	bf0c      	ite	eq
 8000160:	2301      	moveq	r3, #1
 8000162:	2300      	movne	r3, #0
 8000164:	b2db      	uxtb	r3, r3
}
 8000166:	4618      	mov	r0, r3
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800017e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000186:	68fb      	ldr	r3, [r7, #12]
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr

08000192 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000192:	b480      	push	{r7}
 8000194:	b083      	sub	sp, #12
 8000196:	af00      	add	r7, sp, #0
 8000198:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	68db      	ldr	r3, [r3, #12]
 800019e:	f043 0210 	orr.w	r2, r3, #16
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	60da      	str	r2, [r3, #12]
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	695b      	ldr	r3, [r3, #20]
 80001bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	615a      	str	r2, [r3, #20]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80001ce:	b480      	push	{r7}
 80001d0:	b083      	sub	sp, #12
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	695b      	ldr	r3, [r3, #20]
 80001da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	615a      	str	r2, [r3, #20]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) & (USARTx->DR));
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3304      	adds	r3, #4
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
	...

08000204 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	3b01      	subs	r3, #1
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <LL_DMA_EnableChannel+0x38>)
 8000214:	5cd3      	ldrb	r3, [r2, r3]
 8000216:	461a      	mov	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	3a01      	subs	r2, #1
 8000222:	4906      	ldr	r1, [pc, #24]	; (800023c <LL_DMA_EnableChannel+0x38>)
 8000224:	5c8a      	ldrb	r2, [r1, r2]
 8000226:	4611      	mov	r1, r2
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	440a      	add	r2, r1
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	08002728 	.word	0x08002728

08000240 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LL_DMA_DisableChannel+0x38>)
 8000250:	5cd3      	ldrb	r3, [r2, r3]
 8000252:	461a      	mov	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	3a01      	subs	r2, #1
 800025e:	4906      	ldr	r1, [pc, #24]	; (8000278 <LL_DMA_DisableChannel+0x38>)
 8000260:	5c8a      	ldrb	r2, [r1, r2]
 8000262:	4611      	mov	r1, r2
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	440a      	add	r2, r1
 8000268:	f023 0301 	bic.w	r3, r3, #1
 800026c:	6013      	str	r3, [r2, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	08002728 	.word	0x08002728

0800027c <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	3b01      	subs	r3, #1
 800028c:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <LL_DMA_ConfigTransfer+0x44>)
 800028e:	5cd3      	ldrb	r3, [r2, r3]
 8000290:	461a      	mov	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4413      	add	r3, r2
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800029c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	3a01      	subs	r2, #1
 80002a4:	4906      	ldr	r1, [pc, #24]	; (80002c0 <LL_DMA_ConfigTransfer+0x44>)
 80002a6:	5c8a      	ldrb	r2, [r1, r2]
 80002a8:	4611      	mov	r1, r2
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	440a      	add	r2, r1
 80002ae:	4611      	mov	r1, r2
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	08002728 	.word	0x08002728

080002c4 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <LL_DMA_GetDataTransferDirection+0x2c>)
 80002d4:	5cd3      	ldrb	r3, [r2, r3]
 80002d6:	461a      	mov	r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4413      	add	r3, r2
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	f244 0310 	movw	r3, #16400	; 0x4010
 80002e2:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	08002728 	.word	0x08002728

080002f4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	3b01      	subs	r3, #1
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <LL_DMA_SetDataLength+0x40>)
 8000306:	5cd3      	ldrb	r3, [r2, r3]
 8000308:	461a      	mov	r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	0c1b      	lsrs	r3, r3, #16
 8000312:	041b      	lsls	r3, r3, #16
 8000314:	68ba      	ldr	r2, [r7, #8]
 8000316:	3a01      	subs	r2, #1
 8000318:	4906      	ldr	r1, [pc, #24]	; (8000334 <LL_DMA_SetDataLength+0x40>)
 800031a:	5c8a      	ldrb	r2, [r1, r2]
 800031c:	4611      	mov	r1, r2
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	440a      	add	r2, r1
 8000322:	4611      	mov	r1, r2
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	4313      	orrs	r3, r2
 8000328:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	08002728 	.word	0x08002728

08000338 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	4a06      	ldr	r2, [pc, #24]	; (8000360 <LL_DMA_GetDataLength+0x28>)
 8000348:	5cd3      	ldrb	r3, [r2, r3]
 800034a:	461a      	mov	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4413      	add	r3, r2
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	08002728 	.word	0x08002728

08000364 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	2b10      	cmp	r3, #16
 8000376:	d114      	bne.n	80003a2 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	3b01      	subs	r3, #1
 800037c:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 800037e:	5cd3      	ldrb	r3, [r2, r3]
 8000380:	461a      	mov	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4413      	add	r3, r2
 8000386:	461a      	mov	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	3b01      	subs	r3, #1
 8000390:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 8000392:	5cd3      	ldrb	r3, [r2, r3]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4413      	add	r3, r2
 800039a:	461a      	mov	r2, r3
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80003a0:	e013      	b.n	80003ca <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 80003a8:	5cd3      	ldrb	r3, [r2, r3]
 80003aa:	461a      	mov	r2, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	4413      	add	r3, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 80003bc:	5cd3      	ldrb	r3, [r2, r3]
 80003be:	461a      	mov	r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	4413      	add	r3, r2
 80003c4:	461a      	mov	r2, r3
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	60d3      	str	r3, [r2, #12]
}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	08002728 	.word	0x08002728

080003d8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <LL_DMA_EnableIT_TC+0x38>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	461a      	mov	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	3a01      	subs	r2, #1
 80003f6:	4906      	ldr	r1, [pc, #24]	; (8000410 <LL_DMA_EnableIT_TC+0x38>)
 80003f8:	5c8a      	ldrb	r2, [r1, r2]
 80003fa:	4611      	mov	r1, r2
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	440a      	add	r2, r1
 8000400:	f043 0302 	orr.w	r3, r3, #2
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	08002728 	.word	0x08002728

08000414 <Init_LL_USART_IDLE>:

char InitMessage[] = "\n\rHello Uart  115200kb/s \n\rTap Your Message:";


void Init_LL_USART_IDLE(UART_DMA_Handle_Td *USARTX)
{
 8000414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000416:	b087      	sub	sp, #28
 8000418:	af02      	add	r7, sp, #8
 800041a:	6078      	str	r0, [r7, #4]
	Configure_DMA(USARTX);
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f000 f8c5 	bl	80005ac <Configure_DMA>
	StartTransfers(USARTX);
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 f89c 	bl	8000560 <StartTransfers>
	uint16_t sizeInitMessage = sizeof(InitMessage)-1;
 8000428:	232c      	movs	r3, #44	; 0x2c
 800042a:	81fb      	strh	r3, [r7, #14]
	USARTX->Uart_ready_to_TX = false;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2200      	movs	r2, #0
 8000430:	731a      	strb	r2, [r3, #12]
	LL_DMA_DisableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	4619      	mov	r1, r3
 8000438:	4815      	ldr	r0, [pc, #84]	; (8000490 <Init_LL_USART_IDLE+0x7c>)
 800043a:	f7ff ff01 	bl	8000240 <LL_DMA_DisableChannel>
	/* It should be */
	  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	689c      	ldr	r4, [r3, #8]
 8000442:	4e14      	ldr	r6, [pc, #80]	; (8000494 <Init_LL_USART_IDLE+0x80>)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fecf 	bl	80001ec <LL_USART_DMA_GetRegAddr>
 800044e:	4605      	mov	r5, r0
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	4619      	mov	r1, r3
 8000456:	480e      	ldr	r0, [pc, #56]	; (8000490 <Init_LL_USART_IDLE+0x7c>)
 8000458:	f7ff ff34 	bl	80002c4 <LL_DMA_GetDataTransferDirection>
 800045c:	4603      	mov	r3, r0
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	462b      	mov	r3, r5
 8000462:	4632      	mov	r2, r6
 8000464:	4621      	mov	r1, r4
 8000466:	480a      	ldr	r0, [pc, #40]	; (8000490 <Init_LL_USART_IDLE+0x7c>)
 8000468:	f7ff ff7c 	bl	8000364 <LL_DMA_ConfigAddresses>
							(uint32_t) InitMessage,
							 LL_USART_DMA_GetRegAddr(USARTX->Instance),
							 LL_DMA_GetDataTransferDirection(DMA1,USARTX->UART_DMA_TX_CHANNEL));
	LL_DMA_SetDataLength(DMA1, USARTX->UART_DMA_TX_CHANNEL, sizeInitMessage);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	89fa      	ldrh	r2, [r7, #14]
 8000472:	4619      	mov	r1, r3
 8000474:	4806      	ldr	r0, [pc, #24]	; (8000490 <Init_LL_USART_IDLE+0x7c>)
 8000476:	f7ff ff3d 	bl	80002f4 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	4619      	mov	r1, r3
 8000480:	4803      	ldr	r0, [pc, #12]	; (8000490 <Init_LL_USART_IDLE+0x7c>)
 8000482:	f7ff febf 	bl	8000204 <LL_DMA_EnableChannel>
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800048e:	bf00      	nop
 8000490:	40020000 	.word	0x40020000
 8000494:	20000000 	.word	0x20000000

08000498 <TUART_DMA_Trasmit>:

void TUART_DMA_Trasmit(UART_DMA_Handle_Td *USARTX, uint8_t *txBuf, uint16_t size, uint32_t timeout)
{
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	b087      	sub	sp, #28
 800049c:	af02      	add	r7, sp, #8
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	4613      	mov	r3, r2
 80004a6:	80fb      	strh	r3, [r7, #6]
	timeout=HAL_GetTick()+timeout;
 80004a8:	f000 fefa 	bl	80012a0 <HAL_GetTick>
 80004ac:	4602      	mov	r2, r0
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	4413      	add	r3, r2
 80004b2:	603b      	str	r3, [r7, #0]

	while(USARTX->Uart_ready_to_TX != true)
 80004b4:	e006      	b.n	80004c4 <TUART_DMA_Trasmit+0x2c>
	{
		if(HAL_GetTick() > timeout )
 80004b6:	f000 fef3 	bl	80012a0 <HAL_GetTick>
 80004ba:	4602      	mov	r2, r0
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	4293      	cmp	r3, r2
 80004c0:	d308      	bcc.n	80004d4 <TUART_DMA_Trasmit+0x3c>
			{
				break;
			}
		else
			{
				continue;
 80004c2:	bf00      	nop
	while(USARTX->Uart_ready_to_TX != true)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	7b1b      	ldrb	r3, [r3, #12]
 80004c8:	f083 0301 	eor.w	r3, r3, #1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d1f1      	bne.n	80004b6 <TUART_DMA_Trasmit+0x1e>
 80004d2:	e000      	b.n	80004d6 <TUART_DMA_Trasmit+0x3e>
				break;
 80004d4:	bf00      	nop
			}
	}
	if(HAL_GetTick() < USARTX->LastMessageSendTimeStart+MinimumTimeBeetweenNextMessages)
 80004d6:	f000 fee3 	bl	80012a0 <HAL_GetTick>
 80004da:	4602      	mov	r2, r0
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	3314      	adds	r3, #20
 80004e2:	429a      	cmp	r2, r3
 80004e4:	d336      	bcc.n	8000554 <TUART_DMA_Trasmit+0xbc>
	{
		return;
	}
	USARTX->LastMessageSendTimeStart = HAL_GetTick();
 80004e6:	f000 fedb 	bl	80012a0 <HAL_GetTick>
 80004ea:	4602      	mov	r2, r0
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	621a      	str	r2, [r3, #32]

	if(USARTX->Uart_ready_to_TX == true)
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	7b1b      	ldrb	r3, [r3, #12]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d02e      	beq.n	8000556 <TUART_DMA_Trasmit+0xbe>
	{
		USARTX->Uart_ready_to_TX = false;
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	2200      	movs	r2, #0
 80004fc:	731a      	strb	r2, [r3, #12]

		LL_DMA_DisableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	4619      	mov	r1, r3
 8000504:	4815      	ldr	r0, [pc, #84]	; (800055c <TUART_DMA_Trasmit+0xc4>)
 8000506:	f7ff fe9b 	bl	8000240 <LL_DMA_DisableChannel>

	  /* It should be */
		  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	689c      	ldr	r4, [r3, #8]
 800050e:	68bd      	ldr	r5, [r7, #8]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fe69 	bl	80001ec <LL_USART_DMA_GetRegAddr>
 800051a:	4606      	mov	r6, r0
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	4619      	mov	r1, r3
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <TUART_DMA_Trasmit+0xc4>)
 8000524:	f7ff fece 	bl	80002c4 <LL_DMA_GetDataTransferDirection>
 8000528:	4603      	mov	r3, r0
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	4633      	mov	r3, r6
 800052e:	462a      	mov	r2, r5
 8000530:	4621      	mov	r1, r4
 8000532:	480a      	ldr	r0, [pc, #40]	; (800055c <TUART_DMA_Trasmit+0xc4>)
 8000534:	f7ff ff16 	bl	8000364 <LL_DMA_ConfigAddresses>
		                        (uint32_t) txBuf,
		                         LL_USART_DMA_GetRegAddr(USARTX->Instance),
		                         LL_DMA_GetDataTransferDirection(DMA1,USARTX->UART_DMA_TX_CHANNEL));

		LL_DMA_SetDataLength(DMA1, USARTX->UART_DMA_TX_CHANNEL, size);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	88fa      	ldrh	r2, [r7, #6]
 800053e:	4619      	mov	r1, r3
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <TUART_DMA_Trasmit+0xc4>)
 8000542:	f7ff fed7 	bl	80002f4 <LL_DMA_SetDataLength>

		LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	4619      	mov	r1, r3
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <TUART_DMA_Trasmit+0xc4>)
 800054e:	f7ff fe59 	bl	8000204 <LL_DMA_EnableChannel>
 8000552:	e000      	b.n	8000556 <TUART_DMA_Trasmit+0xbe>
		return;
 8000554:	bf00      	nop
	}

}
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055c:	40020000 	.word	0x40020000

08000560 <StartTransfers>:

void StartTransfers(UART_DMA_Handle_Td *USARTX)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	LL_USART_EnableDMAReq_RX(USARTX->Instance);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fe1f 	bl	80001b0 <LL_USART_EnableDMAReq_RX>
	LL_USART_EnableDMAReq_TX(USARTX->Instance);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe29 	bl	80001ce <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4619      	mov	r1, r3
 8000582:	4809      	ldr	r0, [pc, #36]	; (80005a8 <StartTransfers+0x48>)
 8000584:	f7ff fe3e 	bl	8000204 <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	4619      	mov	r1, r3
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <StartTransfers+0x48>)
 8000590:	f7ff fe38 	bl	8000204 <LL_DMA_EnableChannel>
	LL_USART_EnableIT_IDLE(USARTX->Instance);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fdfa 	bl	8000192 <LL_USART_EnableIT_IDLE>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40020000 	.word	0x40020000

080005ac <Configure_DMA>:


void Configure_DMA(UART_DMA_Handle_Td *USARTX)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]

  LL_DMA_ConfigTransfer(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f242 0290 	movw	r2, #8336	; 0x2090
 80005bc:	4619      	mov	r1, r3
 80005be:	482a      	ldr	r0, [pc, #168]	; (8000668 <Configure_DMA+0xbc>)
 80005c0:	f7ff fe5c 	bl	800027c <LL_DMA_ConfigTransfer>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	689c      	ldr	r4, [r3, #8]
                         (uint32_t)USARTX->UART_DMA_TX_Buffer,
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	699b      	ldr	r3, [r3, #24]
  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 80005cc:	461e      	mov	r6, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fe0a 	bl	80001ec <LL_USART_DMA_GetRegAddr>
 80005d8:	4605      	mov	r5, r0
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	4619      	mov	r1, r3
 80005e0:	4821      	ldr	r0, [pc, #132]	; (8000668 <Configure_DMA+0xbc>)
 80005e2:	f7ff fe6f 	bl	80002c4 <LL_DMA_GetDataTransferDirection>
 80005e6:	4603      	mov	r3, r0
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	462b      	mov	r3, r5
 80005ec:	4632      	mov	r2, r6
 80005ee:	4621      	mov	r1, r4
 80005f0:	481d      	ldr	r0, [pc, #116]	; (8000668 <Configure_DMA+0xbc>)
 80005f2:	f7ff feb7 	bl	8000364 <LL_DMA_ConfigAddresses>
                         LL_USART_DMA_GetRegAddr(USARTX->Instance),
                         LL_DMA_GetDataTransferDirection(DMA1, USARTX->UART_DMA_TX_CHANNEL));

  LL_DMA_ConfigTransfer(DMA1, USARTX->UART_DMA_RX_CHANNEL,
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f44f 5202 	mov.w	r2, #8320	; 0x2080
 80005fe:	4619      	mov	r1, r3
 8000600:	4819      	ldr	r0, [pc, #100]	; (8000668 <Configure_DMA+0xbc>)
 8000602:	f7ff fe3b 	bl	800027c <LL_DMA_ConfigTransfer>
                        LL_DMA_MODE_NORMAL                |
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_RX_CHANNEL,
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685c      	ldr	r4, [r3, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fdec 	bl	80001ec <LL_USART_DMA_GetRegAddr>
 8000614:	4605      	mov	r5, r0
                         LL_USART_DMA_GetRegAddr(USARTX->Instance),
						 (uint32_t) USARTX->UART_DMA_RX_Buffer,
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	69db      	ldr	r3, [r3, #28]
  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_RX_CHANNEL,
 800061a:	461e      	mov	r6, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	4619      	mov	r1, r3
 8000622:	4811      	ldr	r0, [pc, #68]	; (8000668 <Configure_DMA+0xbc>)
 8000624:	f7ff fe4e 	bl	80002c4 <LL_DMA_GetDataTransferDirection>
 8000628:	4603      	mov	r3, r0
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	4633      	mov	r3, r6
 800062e:	462a      	mov	r2, r5
 8000630:	4621      	mov	r1, r4
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <Configure_DMA+0xbc>)
 8000634:	f7ff fe96 	bl	8000364 <LL_DMA_ConfigAddresses>
                         LL_DMA_GetDataTransferDirection(DMA1, USARTX->UART_DMA_RX_CHANNEL));
  LL_DMA_SetDataLength(DMA1, USARTX->UART_DMA_RX_CHANNEL, USARTX->ReceiveBufforSize);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6859      	ldr	r1, [r3, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	461a      	mov	r2, r3
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <Configure_DMA+0xbc>)
 8000644:	f7ff fe56 	bl	80002f4 <LL_DMA_SetDataLength>

  /* (5) Enable DMA transfer complete*/
  LL_DMA_EnableIT_TC(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <Configure_DMA+0xbc>)
 8000650:	f7ff fec2 	bl	80003d8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TC(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <Configure_DMA+0xbc>)
 800065c:	f7ff febc 	bl	80003d8 <LL_DMA_EnableIT_TC>
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000668:	40020000 	.word	0x40020000

0800066c <USART_IDLE_CallBack>:

void USART_IDLE_CallBack(UART_DMA_Handle_Td *USARTX)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
		 if(LL_USART_IsActiveFlag_IDLE(USARTX->Instance) )
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fd67 	bl	800014c <LL_USART_IsActiveFlag_IDLE>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d007      	beq.n	8000694 <USART_IDLE_CallBack+0x28>
		{
			LL_USART_ClearFlag_IDLE(USARTX->Instance);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fd71 	bl	8000170 <LL_USART_ClearFlag_IDLE>
			UART_DMA_ReceiveComplete_Callback(USARTX);
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f804 	bl	800069c <UART_DMA_ReceiveComplete_Callback>
		}
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <UART_DMA_ReceiveComplete_Callback>:



void UART_DMA_ReceiveComplete_Callback(UART_DMA_Handle_Td *USARTX)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	LL_DMA_DisableChannel(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4619      	mov	r1, r3
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <UART_DMA_ReceiveComplete_Callback+0x58>)
 80006ac:	f7ff fdc8 	bl	8000240 <LL_DMA_DisableChannel>
 	USARTX->Uart_RX_data_ready = true;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2201      	movs	r2, #1
 80006b4:	735a      	strb	r2, [r3, #13]
  	USARTX->NbofRecData=USARTX->ReceiveBufforSize - LL_DMA_GetDataLength(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	691c      	ldr	r4, [r3, #16]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4619      	mov	r1, r3
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <UART_DMA_ReceiveComplete_Callback+0x58>)
 80006c2:	f7ff fe39 	bl	8000338 <LL_DMA_GetDataLength>
 80006c6:	4603      	mov	r3, r0
 80006c8:	1ae2      	subs	r2, r4, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	615a      	str	r2, [r3, #20]
  	LL_DMA_SetDataLength(DMA1, USARTX->UART_DMA_RX_CHANNEL, USARTX->ReceiveBufforSize);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6859      	ldr	r1, [r3, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	461a      	mov	r2, r3
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <UART_DMA_ReceiveComplete_Callback+0x58>)
 80006da:	f7ff fe0b 	bl	80002f4 <LL_DMA_SetDataLength>
 	LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <UART_DMA_ReceiveComplete_Callback+0x58>)
 80006e6:	f7ff fd8d 	bl	8000204 <LL_DMA_EnableChannel>
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40020000 	.word	0x40020000

080006f8 <UART_DMA_TransmitComplete_Callback>:

void UART_DMA_TransmitComplete_Callback(UART_DMA_Handle_Td *USARTX)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 USARTX->Uart_ready_to_TX = true;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2201      	movs	r2, #1
 8000704:	731a      	strb	r2, [r3, #12]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db0b      	blt.n	8000756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 021f 	and.w	r2, r3, #31
 8000744:	4906      	ldr	r1, [pc, #24]	; (8000760 <__NVIC_EnableIRQ+0x34>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	095b      	lsrs	r3, r3, #5
 800074c:	2001      	movs	r0, #1
 800074e:	fa00 f202 	lsl.w	r2, r0, r2
 8000752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	490c      	ldr	r1, [pc, #48]	; (80007b0 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	; (80007b4 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f1c3 0307 	rsb	r3, r3, #7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	bf28      	it	cs
 80007d6:	2304      	movcs	r3, #4
 80007d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3304      	adds	r3, #4
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d902      	bls.n	80007e8 <NVIC_EncodePriority+0x30>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3b03      	subs	r3, #3
 80007e6:	e000      	b.n	80007ea <NVIC_EncodePriority+0x32>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43da      	mvns	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	401a      	ands	r2, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000800:	f04f 31ff 	mov.w	r1, #4294967295
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43d9      	mvns	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	4313      	orrs	r3, r2
         );
}
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	; 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_DMA_Init+0x68>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_DMA_Init+0x68>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_DMA_Init+0x68>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 800083a:	f7ff ff69 	bl	8000710 <__NVIC_GetPriorityGrouping>
 800083e:	4603      	mov	r3, r0
 8000840:	2200      	movs	r2, #0
 8000842:	2103      	movs	r1, #3
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff ffb7 	bl	80007b8 <NVIC_EncodePriority>
 800084a:	4603      	mov	r3, r0
 800084c:	4619      	mov	r1, r3
 800084e:	2010      	movs	r0, #16
 8000850:	f7ff ff88 	bl	8000764 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000854:	2010      	movs	r0, #16
 8000856:	f7ff ff69 	bl	800072c <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800085a:	f7ff ff59 	bl	8000710 <__NVIC_GetPriorityGrouping>
 800085e:	4603      	mov	r3, r0
 8000860:	2200      	movs	r2, #0
 8000862:	2104      	movs	r1, #4
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffa7 	bl	80007b8 <NVIC_EncodePriority>
 800086a:	4603      	mov	r3, r0
 800086c:	4619      	mov	r1, r3
 800086e:	2011      	movs	r0, #17
 8000870:	f7ff ff78 	bl	8000764 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000874:	2011      	movs	r0, #17
 8000876:	f7ff ff59 	bl	800072c <__NVIC_EnableIRQ>

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <MX_GPIO_Init+0xcc>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0310 	and.w	r3, r3, #16
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a26      	ldr	r2, [pc, #152]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a20      	ldr	r2, [pc, #128]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a1a      	ldr	r2, [pc, #104]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_GPIO_Init+0xcc>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2120      	movs	r1, #32
 8000900:	4815      	ldr	r0, [pc, #84]	; (8000958 <MX_GPIO_Init+0xd0>)
 8000902:	f000 ff69 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_GPIO_Init+0xd4>)
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	4619      	mov	r1, r3
 800091a:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_GPIO_Init+0xd8>)
 800091c:	f000 fdd8 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <MX_GPIO_Init+0xd0>)
 8000938:	f000 fdca 	bl	80014d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2028      	movs	r0, #40	; 0x28
 8000942:	f000 fd8e 	bl	8001462 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000946:	2028      	movs	r0, #40	; 0x28
 8000948:	f000 fda7 	bl	800149a <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	40010800 	.word	0x40010800
 800095c:	10110000 	.word	0x10110000
 8000960:	40011000 	.word	0x40011000

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fc41 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f881 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f7ff ff89 	bl	8000888 <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f7ff ff51 	bl	800081c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800097a:	f000 fb65 	bl	8001048 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  TUART2.Instance=USART2;
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <main+0xf0>)
 8000980:	4a35      	ldr	r2, [pc, #212]	; (8000a58 <main+0xf4>)
 8000982:	601a      	str	r2, [r3, #0]
  TUART2.UART_DMA_RX_CHANNEL=LL_DMA_CHANNEL_6;
 8000984:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <main+0xf0>)
 8000986:	2206      	movs	r2, #6
 8000988:	605a      	str	r2, [r3, #4]
  TUART2.UART_DMA_TX_CHANNEL=LL_DMA_CHANNEL_7;
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <main+0xf0>)
 800098c:	2207      	movs	r2, #7
 800098e:	609a      	str	r2, [r3, #8]
  TUART2.ReceiveBufforSize=1655;
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <main+0xf0>)
 8000992:	f240 6277 	movw	r2, #1655	; 0x677
 8000996:	611a      	str	r2, [r3, #16]
  TUART2.UART_DMA_RX_Buffer=rx_BUF;
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <main+0xf0>)
 800099a:	4a30      	ldr	r2, [pc, #192]	; (8000a5c <main+0xf8>)
 800099c:	61da      	str	r2, [r3, #28]

  Init_LL_USART_IDLE(&TUART2);
 800099e:	482d      	ldr	r0, [pc, #180]	; (8000a54 <main+0xf0>)
 80009a0:	f7ff fd38 	bl	8000414 <Init_LL_USART_IDLE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t LedTimer=0;
	  if(LedTimer+500 < HAL_GetTick())
 80009a4:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <main+0xfc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 80009ac:	f000 fc78 	bl	80012a0 <HAL_GetTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	429c      	cmp	r4, r3
 80009b4:	d208      	bcs.n	80009c8 <main+0x64>
	  {
		  LedTimer = HAL_GetTick();
 80009b6:	f000 fc73 	bl	80012a0 <HAL_GetTick>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a28      	ldr	r2, [pc, #160]	; (8000a60 <main+0xfc>)
 80009be:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_TogglePin(LDG_GPIO_Port, LDG_Pin);
 80009c0:	2120      	movs	r1, #32
 80009c2:	4828      	ldr	r0, [pc, #160]	; (8000a64 <main+0x100>)
 80009c4:	f000 ff20 	bl	8001808 <HAL_GPIO_TogglePin>
//		  TUART_DMA_Trasmit(&TUART2,ex_message, sizeof(ex_message)-1, 0);
	  }
	  //Echo response
	  if(TUART2.Uart_RX_data_ready)
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <main+0xf0>)
 80009ca:	7b5b      	ldrb	r3, [r3, #13]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0e9      	beq.n	80009a4 <main+0x40>
	  {
		  strcpy((char *)tx_BUF,"Received:");
 80009d0:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <main+0x104>)
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <main+0x108>)
 80009d4:	cb03      	ldmia	r3!, {r0, r1}
 80009d6:	6010      	str	r0, [r2, #0]
 80009d8:	6051      	str	r1, [r2, #4]
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	8113      	strh	r3, [r2, #8]

		  uint16_t headerSize = sizeof("Received:")-1;
 80009de:	2309      	movs	r3, #9
 80009e0:	807b      	strh	r3, [r7, #2]

		  for(int i=0; i< TUART2.NbofRecData; i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	e00c      	b.n	8000a02 <main+0x9e>
		  {
			  tx_BUF[headerSize+ i] = TUART2.UART_DMA_RX_Buffer[i];
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <main+0xf0>)
 80009ea:	69da      	ldr	r2, [r3, #28]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	441a      	add	r2, r3
 80009f0:	8879      	ldrh	r1, [r7, #2]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	440b      	add	r3, r1
 80009f6:	7811      	ldrb	r1, [r2, #0]
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <main+0x104>)
 80009fa:	54d1      	strb	r1, [r2, r3]
		  for(int i=0; i< TUART2.NbofRecData; i++)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	3301      	adds	r3, #1
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <main+0xf0>)
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8ed      	bhi.n	80009e8 <main+0x84>
		  }
		  tx_BUF[headerSize+ TUART2.NbofRecData] = '\n';
 8000a0c:	887a      	ldrh	r2, [r7, #2]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <main+0xf0>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <main+0x104>)
 8000a16:	210a      	movs	r1, #10
 8000a18:	54d1      	strb	r1, [r2, r3]
		  tx_BUF[headerSize+ TUART2.NbofRecData+1] = '\r';
 8000a1a:	887a      	ldrh	r2, [r7, #2]
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <main+0xf0>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4413      	add	r3, r2
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <main+0x104>)
 8000a26:	210d      	movs	r1, #13
 8000a28:	54d1      	strb	r1, [r2, r3]
		  tx_Bsize= headerSize+TUART2.NbofRecData+1;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <main+0xf0>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	887b      	ldrh	r3, [r7, #2]
 8000a32:	4413      	add	r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <main+0x10c>)
 8000a3c:	801a      	strh	r2, [r3, #0]
		  TUART_DMA_Trasmit(&TUART2,tx_BUF, tx_Bsize, 10);
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <main+0x10c>)
 8000a40:	881a      	ldrh	r2, [r3, #0]
 8000a42:	230a      	movs	r3, #10
 8000a44:	4908      	ldr	r1, [pc, #32]	; (8000a68 <main+0x104>)
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <main+0xf0>)
 8000a48:	f7ff fd26 	bl	8000498 <TUART_DMA_Trasmit>
		  TUART2.Uart_RX_data_ready=0;
 8000a4c:	4b01      	ldr	r3, [pc, #4]	; (8000a54 <main+0xf0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	735a      	strb	r2, [r3, #13]
  {
 8000a52:	e7a7      	b.n	80009a4 <main+0x40>
 8000a54:	200006d8 	.word	0x200006d8
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	20000060 	.word	0x20000060
 8000a60:	2000005c 	.word	0x2000005c
 8000a64:	40010800 	.word	0x40010800
 8000a68:	200006fc 	.word	0x200006fc
 8000a6c:	0800270c 	.word	0x0800270c
 8000a70:	20000058 	.word	0x20000058

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0318 	add.w	r3, r7, #24
 8000a7e:	2228      	movs	r2, #40	; 0x28
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fe2e 	bl	80026e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aaa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fee3 	bl	8001880 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000ac0:	f000 f819 	bl	8000af6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2102      	movs	r1, #2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 f94e 	bl	8001d80 <HAL_RCC_ClockConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000aea:	f000 f804 	bl	8000af6 <Error_Handler>
  }
}
 8000aee:	bf00      	nop
 8000af0:	3740      	adds	r7, #64	; 0x40
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afa:	b672      	cpsid	i
}
 8000afc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afe:	e7fe      	b.n	8000afe <Error_Handler+0x8>

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b08:	699b      	ldr	r3, [r3, #24]
 8000b0a:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6193      	str	r3, [r2, #24]
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b20:	69db      	ldr	r3, [r3, #28]
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x5c>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_MspInit+0x60>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_MspInit+0x60>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010000 	.word	0x40010000

08000b64 <LL_DMA_IsActiveFlag_TC6>:
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b78:	bf0c      	ite	eq
 8000b7a:	2301      	moveq	r3, #1
 8000b7c:	2300      	movne	r3, #0
 8000b7e:	b2db      	uxtb	r3, r3
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <LL_DMA_IsActiveFlag_TC7>:
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2301      	moveq	r3, #1
 8000ba2:	2300      	movne	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <LL_DMA_ClearFlag_GI6>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bbe:	605a      	str	r2, [r3, #4]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <LL_DMA_ClearFlag_GI7>:
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bd8:	605a      	str	r2, [r3, #4]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 fb27 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	//The shouldn't never go here
	  if(LL_DMA_IsActiveFlag_TC6(DMA1))
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <DMA1_Channel6_IRQHandler+0x20>)
 8000c3a:	f7ff ff93 	bl	8000b64 <LL_DMA_IsActiveFlag_TC6>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d005      	beq.n	8000c50 <DMA1_Channel6_IRQHandler+0x1c>
	  {
	    LL_DMA_ClearFlag_GI6(DMA1);
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <DMA1_Channel6_IRQHandler+0x20>)
 8000c46:	f7ff ffb3 	bl	8000bb0 <LL_DMA_ClearFlag_GI6>
	    /* Call function Reception complete Callback */
	    UART_DMA_ReceiveComplete_Callback(&TUART2);
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <DMA1_Channel6_IRQHandler+0x24>)
 8000c4c:	f7ff fd26 	bl	800069c <UART_DMA_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40020000 	.word	0x40020000
 8000c58:	200006d8 	.word	0x200006d8

08000c5c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	  if(LL_DMA_IsActiveFlag_TC7(DMA1))
 8000c60:	4806      	ldr	r0, [pc, #24]	; (8000c7c <DMA1_Channel7_IRQHandler+0x20>)
 8000c62:	f7ff ff92 	bl	8000b8a <LL_DMA_IsActiveFlag_TC7>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d005      	beq.n	8000c78 <DMA1_Channel7_IRQHandler+0x1c>
	  {
	    LL_DMA_ClearFlag_GI7(DMA1);
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <DMA1_Channel7_IRQHandler+0x20>)
 8000c6e:	f7ff ffac 	bl	8000bca <LL_DMA_ClearFlag_GI7>
	    /* Call function Transmission complete Callback */
	    UART_DMA_TransmitComplete_Callback(&TUART2);
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <DMA1_Channel7_IRQHandler+0x24>)
 8000c74:	f7ff fd40 	bl	80006f8 <UART_DMA_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	200006d8 	.word	0x200006d8

08000c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_IDLE_CallBack(&TUART2);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <USART2_IRQHandler+0x10>)
 8000c8a:	f7ff fcef 	bl	800066c <USART_IDLE_CallBack>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200006d8 	.word	0x200006d8

08000c98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ca0:	f000 fdcc 	bl	800183c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <__NVIC_GetPriorityGrouping>:
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <LL_USART_Enable>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	60da      	str	r2, [r3, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <LL_USART_ConfigAsyncMode>:
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	615a      	str	r2, [r3, #20]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e12:	69da      	ldr	r2, [r3, #28]
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e1e:	69da      	ldr	r2, [r3, #28]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000

08000e38 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e42:	699a      	ldr	r2, [r3, #24]
 8000e44:	4907      	ldr	r1, [pc, #28]	; (8000e64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e4c:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000e4e:	699a      	ldr	r2, [r3, #24]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4013      	ands	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e56:	68fb      	ldr	r3, [r7, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <LL_DMA_SetDataTransferDirection>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <LL_DMA_SetDataTransferDirection+0x44>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e88:	f023 0310 	bic.w	r3, r3, #16
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	3a01      	subs	r2, #1
 8000e90:	4906      	ldr	r1, [pc, #24]	; (8000eac <LL_DMA_SetDataTransferDirection+0x44>)
 8000e92:	5c8a      	ldrb	r2, [r1, r2]
 8000e94:	4611      	mov	r1, r2
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	440a      	add	r2, r1
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	600b      	str	r3, [r1, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	08002748 	.word	0x08002748

08000eb0 <LL_DMA_SetMode>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <LL_DMA_SetMode+0x40>)
 8000ec2:	5cd3      	ldrb	r3, [r2, r3]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f023 0220 	bic.w	r2, r3, #32
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	4906      	ldr	r1, [pc, #24]	; (8000ef0 <LL_DMA_SetMode+0x40>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	440b      	add	r3, r1
 8000ede:	4619      	mov	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	08002748 	.word	0x08002748

08000ef4 <LL_DMA_SetPeriphIncMode>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <LL_DMA_SetPeriphIncMode+0x40>)
 8000f06:	5cd3      	ldrb	r3, [r2, r3]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <LL_DMA_SetPeriphIncMode+0x40>)
 8000f1a:	5ccb      	ldrb	r3, [r1, r3]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	440b      	add	r3, r1
 8000f22:	4619      	mov	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	08002748 	.word	0x08002748

08000f38 <LL_DMA_SetMemoryIncMode>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LL_DMA_SetMemoryIncMode+0x40>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4413      	add	r3, r2
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	4906      	ldr	r1, [pc, #24]	; (8000f78 <LL_DMA_SetMemoryIncMode+0x40>)
 8000f5e:	5ccb      	ldrb	r3, [r1, r3]
 8000f60:	4619      	mov	r1, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	440b      	add	r3, r1
 8000f66:	4619      	mov	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	600b      	str	r3, [r1, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	08002748 	.word	0x08002748

08000f7c <LL_DMA_SetPeriphSize>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <LL_DMA_SetPeriphSize+0x40>)
 8000f8e:	5cd3      	ldrb	r3, [r2, r3]
 8000f90:	461a      	mov	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4413      	add	r3, r2
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	4906      	ldr	r1, [pc, #24]	; (8000fbc <LL_DMA_SetPeriphSize+0x40>)
 8000fa2:	5ccb      	ldrb	r3, [r1, r3]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	440b      	add	r3, r1
 8000faa:	4619      	mov	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	600b      	str	r3, [r1, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	08002748 	.word	0x08002748

08000fc0 <LL_DMA_SetMemorySize>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LL_DMA_SetMemorySize+0x40>)
 8000fd2:	5cd3      	ldrb	r3, [r2, r3]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	4906      	ldr	r1, [pc, #24]	; (8001000 <LL_DMA_SetMemorySize+0x40>)
 8000fe6:	5ccb      	ldrb	r3, [r1, r3]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	440b      	add	r3, r1
 8000fee:	4619      	mov	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	08002748 	.word	0x08002748

08001004 <LL_DMA_SetChannelPriorityLevel>:
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	3b01      	subs	r3, #1
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001016:	5cd3      	ldrb	r3, [r2, r3]
 8001018:	461a      	mov	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	3b01      	subs	r3, #1
 8001028:	4906      	ldr	r1, [pc, #24]	; (8001044 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800102a:	5ccb      	ldrb	r3, [r1, r3]
 800102c:	4619      	mov	r1, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	440b      	add	r3, r1
 8001032:	4619      	mov	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	08002748 	.word	0x08002748

08001048 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001070:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001074:	f7ff fec8 	bl	8000e08 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001078:	2004      	movs	r0, #4
 800107a:	f7ff fedd 	bl	8000e38 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800107e:	f240 4304 	movw	r3, #1028	; 0x404
 8001082:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001084:	2309      	movs	r3, #9
 8001086:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001088:	2302      	movs	r3, #2
 800108a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4840      	ldr	r0, [pc, #256]	; (8001198 <MX_USART2_UART_Init+0x150>)
 8001096:	f001 f893 	bl	80021c0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 800109a:	f640 0308 	movw	r3, #2056	; 0x808
 800109e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010a0:	2309      	movs	r3, #9
 80010a2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	483b      	ldr	r0, [pc, #236]	; (8001198 <MX_USART2_UART_Init+0x150>)
 80010aa:	f001 f889 	bl	80021c0 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2106      	movs	r1, #6
 80010b2:	483a      	ldr	r0, [pc, #232]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010b4:	f7ff fed8 	bl	8000e68 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2106      	movs	r1, #6
 80010bc:	4837      	ldr	r0, [pc, #220]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010be:	f7ff ffa1 	bl	8001004 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2106      	movs	r1, #6
 80010c6:	4835      	ldr	r0, [pc, #212]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010c8:	f7ff fef2 	bl	8000eb0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2106      	movs	r1, #6
 80010d0:	4832      	ldr	r0, [pc, #200]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010d2:	f7ff ff0f 	bl	8000ef4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	2106      	movs	r1, #6
 80010da:	4830      	ldr	r0, [pc, #192]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010dc:	f7ff ff2c 	bl	8000f38 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2106      	movs	r1, #6
 80010e4:	482d      	ldr	r0, [pc, #180]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010e6:	f7ff ff49 	bl	8000f7c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2106      	movs	r1, #6
 80010ee:	482b      	ldr	r0, [pc, #172]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010f0:	f7ff ff66 	bl	8000fc0 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80010f4:	2210      	movs	r2, #16
 80010f6:	2107      	movs	r1, #7
 80010f8:	4828      	ldr	r0, [pc, #160]	; (800119c <MX_USART2_UART_Init+0x154>)
 80010fa:	f7ff feb5 	bl	8000e68 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 80010fe:	2200      	movs	r2, #0
 8001100:	2107      	movs	r1, #7
 8001102:	4826      	ldr	r0, [pc, #152]	; (800119c <MX_USART2_UART_Init+0x154>)
 8001104:	f7ff ff7e 	bl	8001004 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001108:	2200      	movs	r2, #0
 800110a:	2107      	movs	r1, #7
 800110c:	4823      	ldr	r0, [pc, #140]	; (800119c <MX_USART2_UART_Init+0x154>)
 800110e:	f7ff fecf 	bl	8000eb0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001112:	2200      	movs	r2, #0
 8001114:	2107      	movs	r1, #7
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <MX_USART2_UART_Init+0x154>)
 8001118:	f7ff feec 	bl	8000ef4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	2107      	movs	r1, #7
 8001120:	481e      	ldr	r0, [pc, #120]	; (800119c <MX_USART2_UART_Init+0x154>)
 8001122:	f7ff ff09 	bl	8000f38 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001126:	2200      	movs	r2, #0
 8001128:	2107      	movs	r1, #7
 800112a:	481c      	ldr	r0, [pc, #112]	; (800119c <MX_USART2_UART_Init+0x154>)
 800112c:	f7ff ff26 	bl	8000f7c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001130:	2200      	movs	r2, #0
 8001132:	2107      	movs	r1, #7
 8001134:	4819      	ldr	r0, [pc, #100]	; (800119c <MX_USART2_UART_Init+0x154>)
 8001136:	f7ff ff43 	bl	8000fc0 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800113a:	f7ff fdbb 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 800113e:	4603      	mov	r3, r0
 8001140:	2200      	movs	r2, #0
 8001142:	2105      	movs	r1, #5
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fe09 	bl	8000d5c <NVIC_EncodePriority>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	2026      	movs	r0, #38	; 0x26
 8001150:	f7ff fdda 	bl	8000d08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001154:	2026      	movs	r0, #38	; 0x26
 8001156:	f7ff fdbb 	bl	8000cd0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800115a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800115e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800116c:	230c      	movs	r3, #12
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4808      	ldr	r0, [pc, #32]	; (80011a0 <MX_USART2_UART_Init+0x158>)
 8001180:	f001 fa2c 	bl	80025dc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001184:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_USART2_UART_Init+0x158>)
 8001186:	f7ff fe2a 	bl	8000dde <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_USART2_UART_Init+0x158>)
 800118c:	f7ff fe18 	bl	8000dc0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3730      	adds	r7, #48	; 0x30
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010800 	.word	0x40010800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40004400 	.word	0x40004400

080011a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011a6:	e003      	b.n	80011b0 <LoopCopyDataInit>

080011a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80011aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011ae:	3104      	adds	r1, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011b0:	480a      	ldr	r0, [pc, #40]	; (80011dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80011b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011b8:	d3f6      	bcc.n	80011a8 <CopyDataInit>
  ldr r2, =_sbss
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011bc:	e002      	b.n	80011c4 <LoopFillZerobss>

080011be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011c0:	f842 3b04 	str.w	r3, [r2], #4

080011c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011c8:	d3f9      	bcc.n	80011be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ca:	f7ff fd6d 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ce:	f001 fa65 	bl	800269c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d2:	f7ff fbc7 	bl	8000964 <main>
  bx lr
 80011d6:	4770      	bx	lr
  ldr r3, =_sidata
 80011d8:	08002758 	.word	0x08002758
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011e0:	2000003c 	.word	0x2000003c
  ldr r2, =_sbss
 80011e4:	2000003c 	.word	0x2000003c
  ldr r3, = _ebss
 80011e8:	20000ae8 	.word	0x20000ae8

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x28>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x28>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f923 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	2000      	movs	r0, #0
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fc78 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f93b 	bl	80014b6 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f903 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000030 	.word	0x20000030
 8001274:	20000038 	.word	0x20000038
 8001278:	20000034 	.word	0x20000034

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <HAL_IncTick+0x20>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	20000038 	.word	0x20000038
 800129c:	20000ae4 	.word	0x20000ae4

080012a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <HAL_GetTick+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000ae4 	.word	0x20000ae4

080012b4 <__NVIC_SetPriorityGrouping>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <__NVIC_EnableIRQ+0x34>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff90 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff2d 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff42 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff35 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b08b      	sub	sp, #44	; 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e169      	b.n	80017b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e4:	2201      	movs	r2, #1
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8158 	bne.w	80017b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a9a      	ldr	r2, [pc, #616]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d05e      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800150c:	4a98      	ldr	r2, [pc, #608]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d875      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001512:	4a98      	ldr	r2, [pc, #608]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d058      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001518:	4a96      	ldr	r2, [pc, #600]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d86f      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800151e:	4a96      	ldr	r2, [pc, #600]	; (8001778 <HAL_GPIO_Init+0x2a8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d052      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001524:	4a94      	ldr	r2, [pc, #592]	; (8001778 <HAL_GPIO_Init+0x2a8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d869      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800152a:	4a94      	ldr	r2, [pc, #592]	; (800177c <HAL_GPIO_Init+0x2ac>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04c      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001530:	4a92      	ldr	r2, [pc, #584]	; (800177c <HAL_GPIO_Init+0x2ac>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d863      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001536:	4a92      	ldr	r2, [pc, #584]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d046      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800153c:	4a90      	ldr	r2, [pc, #576]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d85d      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d82a      	bhi.n	800159c <HAL_GPIO_Init+0xcc>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d859      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <HAL_GPIO_Init+0x80>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	080015cb 	.word	0x080015cb
 8001554:	080015a5 	.word	0x080015a5
 8001558:	080015b7 	.word	0x080015b7
 800155c:	080015f9 	.word	0x080015f9
 8001560:	080015ff 	.word	0x080015ff
 8001564:	080015ff 	.word	0x080015ff
 8001568:	080015ff 	.word	0x080015ff
 800156c:	080015ff 	.word	0x080015ff
 8001570:	080015ff 	.word	0x080015ff
 8001574:	080015ff 	.word	0x080015ff
 8001578:	080015ff 	.word	0x080015ff
 800157c:	080015ff 	.word	0x080015ff
 8001580:	080015ff 	.word	0x080015ff
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015ff 	.word	0x080015ff
 800158c:	080015ff 	.word	0x080015ff
 8001590:	080015ff 	.word	0x080015ff
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015c1 	.word	0x080015c1
 800159c:	4a79      	ldr	r2, [pc, #484]	; (8001784 <HAL_GPIO_Init+0x2b4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a2:	e02c      	b.n	80015fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e029      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	3304      	adds	r3, #4
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e024      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	3308      	adds	r3, #8
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e01f      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	330c      	adds	r3, #12
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e01a      	b.n	8001600 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d2:	2304      	movs	r3, #4
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e013      	b.n	8001600 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	611a      	str	r2, [r3, #16]
          break;
 80015ea:	e009      	b.n	8001600 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	615a      	str	r2, [r3, #20]
          break;
 80015f6:	e003      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x130>
          break;
 80015fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d801      	bhi.n	800160a <HAL_GPIO_Init+0x13a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e001      	b.n	800160e <HAL_GPIO_Init+0x13e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d802      	bhi.n	800161c <HAL_GPIO_Init+0x14c>
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x152>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	3b08      	subs	r3, #8
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	210f      	movs	r1, #15
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80b1 	beq.w	80017b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001650:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2bc>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a40      	ldr	r2, [pc, #256]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1ec>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_GPIO_Init+0x2c4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1e8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3d      	ldr	r2, [pc, #244]	; (800179c <HAL_GPIO_Init+0x2cc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1e0>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e004      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016bc:	2300      	movs	r3, #0
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ce:	492f      	ldr	r1, [pc, #188]	; (800178c <HAL_GPIO_Init+0x2bc>)
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	492c      	ldr	r1, [pc, #176]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4928      	ldr	r1, [pc, #160]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001700:	4013      	ands	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4922      	ldr	r1, [pc, #136]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	491e      	ldr	r1, [pc, #120]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001728:	4013      	ands	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	4918      	ldr	r1, [pc, #96]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	608b      	str	r3, [r1, #8]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4914      	ldr	r1, [pc, #80]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d021      	beq.n	80017a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	490e      	ldr	r1, [pc, #56]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e021      	b.n	80017b2 <HAL_GPIO_Init+0x2e2>
 800176e:	bf00      	nop
 8001770:	10320000 	.word	0x10320000
 8001774:	10310000 	.word	0x10310000
 8001778:	10220000 	.word	0x10220000
 800177c:	10210000 	.word	0x10210000
 8001780:	10120000 	.word	0x10120000
 8001784:	10110000 	.word	0x10110000
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000
 8001790:	40010800 	.word	0x40010800
 8001794:	40010c00 	.word	0x40010c00
 8001798:	40011000 	.word	0x40011000
 800179c:	40011400 	.word	0x40011400
 80017a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_GPIO_Init+0x304>)
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4909      	ldr	r1, [pc, #36]	; (80017d4 <HAL_GPIO_Init+0x304>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f ae8e 	bne.w	80014e4 <HAL_GPIO_Init+0x14>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	372c      	adds	r7, #44	; 0x2c
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43d9      	mvns	r1, r3
 8001826:	887b      	ldrh	r3, [r7, #2]
 8001828:	400b      	ands	r3, r1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
	...

0800183c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f806 	bl	800186c <HAL_GPIO_EXTI_Callback>
  }
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40010400 	.word	0x40010400

0800186c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e26c      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8087 	beq.w	80019ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d00c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ac:	4b8f      	ldr	r3, [pc, #572]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d112      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
 80018b8:	4b8c      	ldr	r3, [pc, #560]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d10b      	bne.n	80018de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c6:	4b89      	ldr	r3, [pc, #548]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06c      	beq.n	80019ac <HAL_RCC_OscConfig+0x12c>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d168      	bne.n	80019ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e246      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e6:	d106      	bne.n	80018f6 <HAL_RCC_OscConfig+0x76>
 80018e8:	4b80      	ldr	r3, [pc, #512]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a7f      	ldr	r2, [pc, #508]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	e02e      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0x98>
 80018fe:	4b7b      	ldr	r3, [pc, #492]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7a      	ldr	r2, [pc, #488]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b78      	ldr	r3, [pc, #480]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a77      	ldr	r2, [pc, #476]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e01d      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0xbc>
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a71      	ldr	r2, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0xd4>
 800193c:	4b6b      	ldr	r3, [pc, #428]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6a      	ldr	r2, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a67      	ldr	r2, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d013      	beq.n	8001984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fca0 	bl	80012a0 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fc9c 	bl	80012a0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1fa      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f0      	beq.n	8001964 <HAL_RCC_OscConfig+0xe4>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fc8c 	bl	80012a0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fc88 	bl	80012a0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1e6      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f0      	bne.n	800198c <HAL_RCC_OscConfig+0x10c>
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ba:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d11c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x18c>
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d116      	bne.n	8001a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_RCC_OscConfig+0x176>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e1ba      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4939      	ldr	r1, [pc, #228]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	e03a      	b.n	8001a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d020      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <HAL_RCC_OscConfig+0x270>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fc41 	bl	80012a0 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff fc3d 	bl	80012a0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e19b      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a34:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4927      	ldr	r1, [pc, #156]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	600b      	str	r3, [r1, #0]
 8001a54:	e015      	b.n	8001a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <HAL_RCC_OscConfig+0x270>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc20 	bl	80012a0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff fc1c 	bl	80012a0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e17a      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d03a      	beq.n	8001b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d019      	beq.n	8001aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fc00 	bl	80012a0 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fbfc 	bl	80012a0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e15a      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 faa6 	bl	8002014 <RCC_Delay>
 8001ac8:	e01c      	b.n	8001b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fbe6 	bl	80012a0 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad6:	e00f      	b.n	8001af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fbe2 	bl	80012a0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d908      	bls.n	8001af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e140      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	42420000 	.word	0x42420000
 8001af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	4b9e      	ldr	r3, [pc, #632]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e9      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 80a6 	beq.w	8001c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b16:	4b97      	ldr	r3, [pc, #604]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10d      	bne.n	8001b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b94      	ldr	r3, [pc, #592]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a93      	ldr	r2, [pc, #588]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]
 8001b2e:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	4b8e      	ldr	r3, [pc, #568]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d118      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b56:	f7ff fba3 	bl	80012a0 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5e:	f7ff fb9f 	bl	80012a0 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e0fd      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d106      	bne.n	8001b92 <HAL_RCC_OscConfig+0x312>
 8001b84:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	e02d      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x334>
 8001b9a:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	4a75      	ldr	r2, [pc, #468]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6213      	str	r3, [r2, #32]
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a72      	ldr	r2, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f023 0304 	bic.w	r3, r3, #4
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	e01c      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d10c      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x356>
 8001bbc:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a6c      	ldr	r2, [pc, #432]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a69      	ldr	r2, [pc, #420]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	e00b      	b.n	8001bee <HAL_RCC_OscConfig+0x36e>
 8001bd6:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a66      	ldr	r2, [pc, #408]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6213      	str	r3, [r2, #32]
 8001be2:	4b64      	ldr	r3, [pc, #400]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a63      	ldr	r2, [pc, #396]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	f023 0304 	bic.w	r3, r3, #4
 8001bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d015      	beq.n	8001c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf6:	f7ff fb53 	bl	80012a0 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	e00a      	b.n	8001c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fb4f 	bl	80012a0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0ab      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ee      	beq.n	8001bfe <HAL_RCC_OscConfig+0x37e>
 8001c20:	e014      	b.n	8001c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff fb3d 	bl	80012a0 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff fb39 	bl	80012a0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e095      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c52:	4b48      	ldr	r3, [pc, #288]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a47      	ldr	r2, [pc, #284]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8081 	beq.w	8001d6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c68:	4b42      	ldr	r3, [pc, #264]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d061      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d146      	bne.n	8001d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_OscConfig+0x4fc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fb0d 	bl	80012a0 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff fb09 	bl	80012a0 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e067      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9c:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb0:	d108      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb2:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	492d      	ldr	r1, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a19      	ldr	r1, [r3, #32]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x4fc>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce2:	f7ff fadd 	bl	80012a0 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7ff fad9 	bl	80012a0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e037      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x46a>
 8001d08:	e02f      	b.n	8001d6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_RCC_OscConfig+0x4fc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fac6 	bl	80012a0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff fac2 	bl	80012a0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e020      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x498>
 8001d36:	e018      	b.n	8001d6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e013      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d001      	beq.n	8001d6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42420060 	.word	0x42420060

08001d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0d0      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b67      	ldr	r3, [pc, #412]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	4965      	ldr	r1, [pc, #404]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b63      	ldr	r3, [pc, #396]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b8      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ddc:	4b59      	ldr	r3, [pc, #356]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4a58      	ldr	r2, [pc, #352]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b50      	ldr	r3, [pc, #320]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	494d      	ldr	r1, [pc, #308]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d040      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e073      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06b      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b39      	ldr	r3, [pc, #228]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4936      	ldr	r1, [pc, #216]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e70:	f7ff fa16 	bl	80012a0 <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff fa12 	bl	80012a0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e053      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d210      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4922      	ldr	r1, [pc, #136]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4916      	ldr	r1, [pc, #88]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x1c8>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <HAL_RCC_ClockConfig+0x1cc>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x1d0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f974 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40022000 	.word	0x40022000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08002730 	.word	0x08002730
 8001f4c:	20000030 	.word	0x20000030
 8001f50:	20000034 	.word	0x20000034

08001f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b490      	push	{r4, r7}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f5c:	1d3c      	adds	r4, r7, #4
 8001f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f64:	f240 2301 	movw	r3, #513	; 0x201
 8001f68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61bb      	str	r3, [r7, #24]
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x40>
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x46>
 8001f92:	e02d      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f96:	623b      	str	r3, [r7, #32]
      break;
 8001f98:	e02d      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	0c9b      	lsrs	r3, r3, #18
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	0c5b      	lsrs	r3, r3, #17
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd2:	fb02 f203 	mul.w	r2, r2, r3
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fde:	e004      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	623b      	str	r3, [r7, #32]
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff2:	623b      	str	r3, [r7, #32]
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3728      	adds	r7, #40	; 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc90      	pop	{r4, r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	08002718 	.word	0x08002718
 8002008:	40021000 	.word	0x40021000
 800200c:	007a1200 	.word	0x007a1200
 8002010:	003d0900 	.word	0x003d0900

08002014 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <RCC_Delay+0x34>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <RCC_Delay+0x38>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0a5b      	lsrs	r3, r3, #9
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002030:	bf00      	nop
  }
  while (Delay --);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e5a      	subs	r2, r3, #1
 8002036:	60fa      	str	r2, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f9      	bne.n	8002030 <RCC_Delay+0x1c>
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000030 	.word	0x20000030
 800204c:	10624dd3 	.word	0x10624dd3

08002050 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002050:	b490      	push	{r4, r7}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	461a      	mov	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	0e1b      	lsrs	r3, r3, #24
 8002064:	4413      	add	r3, r2
 8002066:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002068:	6822      	ldr	r2, [r4, #0]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	fab3 f383 	clz	r3, r3
 800207c:	b2db      	uxtb	r3, r3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	210f      	movs	r1, #15
 8002082:	fa01 f303 	lsl.w	r3, r1, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	401a      	ands	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa93 f3a3 	rbit	r3, r3
 8002094:	61bb      	str	r3, [r7, #24]
  return result;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	6023      	str	r3, [r4, #0]
}
 80020aa:	bf00      	nop
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc90      	pop	{r4, r7}
 80020b2:	4770      	bx	lr

080020b4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80020b4:	b490      	push	{r4, r7}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	0e1b      	lsrs	r3, r3, #24
 80020c8:	4413      	add	r3, r2
 80020ca:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80020cc:	6822      	ldr	r2, [r4, #0]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	613b      	str	r3, [r7, #16]
  return result;
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	2103      	movs	r1, #3
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	401a      	ands	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	61bb      	str	r3, [r7, #24]
  return result;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800210e:	bf00      	nop
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bc90      	pop	{r4, r7}
 8002116:	4770      	bx	lr

08002118 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8002118:	b490      	push	{r4, r7}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	0e1b      	lsrs	r3, r3, #24
 800212c:	4413      	add	r3, r2
 800212e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	613b      	str	r3, [r7, #16]
  return result;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	2104      	movs	r1, #4
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	61bb      	str	r3, [r7, #24]
  return result;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bc90      	pop	{r4, r7}
 800217a:	4770      	bx	lr

0800217c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	613b      	str	r3, [r7, #16]
  return result;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4619      	mov	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	408b      	lsls	r3, r1
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	60da      	str	r2, [r3, #12]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	60fb      	str	r3, [r7, #12]
  return result;
 80021e0:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80021ea:	e044      	b.n	8002276 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	409a      	lsls	r2, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d03a      	beq.n	8002270 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2b07      	cmp	r3, #7
 80021fe:	d806      	bhi.n	800220e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002200:	f240 1201 	movw	r2, #257	; 0x101
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e008      	b.n	8002220 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b08      	subs	r3, #8
 8002212:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800221e:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d106      	bne.n	8002236 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	461a      	mov	r2, r3
 800222e:	69b9      	ldr	r1, [r7, #24]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffa3 	bl	800217c <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	461a      	mov	r2, r3
 800223c:	69b9      	ldr	r1, [r7, #24]
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ff06 	bl	8002050 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d003      	beq.n	8002254 <LL_GPIO_Init+0x94>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d10d      	bne.n	8002270 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	461a      	mov	r2, r3
 800225a:	69b9      	ldr	r1, [r7, #24]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff29 	bl	80020b4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	69b9      	ldr	r1, [r7, #24]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ff54 	bl	8002118 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	3301      	adds	r3, #1
 8002274:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1b4      	bne.n	80021ec <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3720      	adds	r7, #32
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <LL_RCC_GetSysClkSource+0x14>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 030c 	and.w	r3, r3, #12
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000

080022a4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <LL_RCC_GetAHBPrescaler+0x14>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000

080022bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000

080022d4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <LL_RCC_GetAPB2Prescaler+0x14>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40021000 	.word	0x40021000

080022ec <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <LL_RCC_PLL_GetMainSource+0x14>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000

08002304 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000

0800231c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <LL_RCC_PLL_GetPrediv+0x18>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0c5b      	lsrs	r3, r3, #17
 8002326:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000

08002338 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002340:	f000 f820 	bl	8002384 <RCC_GetSystemClockFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f83e 	bl	80023d0 <RCC_GetHCLKClockFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f84c 	bl	80023fc <RCC_GetPCLK1ClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f858 	bl	8002424 <RCC_GetPCLK2ClockFreq>
 8002374:	4602      	mov	r2, r0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60da      	str	r2, [r3, #12]
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800238e:	f7ff ff7d 	bl	800228c <LL_RCC_GetSysClkSource>
 8002392:	4603      	mov	r3, r0
 8002394:	2b08      	cmp	r3, #8
 8002396:	d00c      	beq.n	80023b2 <RCC_GetSystemClockFreq+0x2e>
 8002398:	2b08      	cmp	r3, #8
 800239a:	d80e      	bhi.n	80023ba <RCC_GetSystemClockFreq+0x36>
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <RCC_GetSystemClockFreq+0x22>
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d003      	beq.n	80023ac <RCC_GetSystemClockFreq+0x28>
 80023a4:	e009      	b.n	80023ba <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <RCC_GetSystemClockFreq+0x48>)
 80023a8:	607b      	str	r3, [r7, #4]
      break;
 80023aa:	e009      	b.n	80023c0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80023ac:	4b07      	ldr	r3, [pc, #28]	; (80023cc <RCC_GetSystemClockFreq+0x48>)
 80023ae:	607b      	str	r3, [r7, #4]
      break;
 80023b0:	e006      	b.n	80023c0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80023b2:	f000 f84b 	bl	800244c <RCC_PLL_GetFreqDomain_SYS>
 80023b6:	6078      	str	r0, [r7, #4]
      break;
 80023b8:	e002      	b.n	80023c0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80023ba:	4b04      	ldr	r3, [pc, #16]	; (80023cc <RCC_GetSystemClockFreq+0x48>)
 80023bc:	607b      	str	r3, [r7, #4]
      break;
 80023be:	bf00      	nop
  }

  return frequency;
 80023c0:	687b      	ldr	r3, [r7, #4]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	007a1200 	.word	0x007a1200

080023d0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80023d8:	f7ff ff64 	bl	80022a4 <LL_RCC_GetAHBPrescaler>
 80023dc:	4603      	mov	r3, r0
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <RCC_GetHCLKClockFreq+0x28>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	40d3      	lsrs	r3, r2
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	08002730 	.word	0x08002730

080023fc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002404:	f7ff ff5a 	bl	80022bc <LL_RCC_GetAPB1Prescaler>
 8002408:	4603      	mov	r3, r0
 800240a:	0a1b      	lsrs	r3, r3, #8
 800240c:	4a04      	ldr	r2, [pc, #16]	; (8002420 <RCC_GetPCLK1ClockFreq+0x24>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	461a      	mov	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	40d3      	lsrs	r3, r2
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	08002740 	.word	0x08002740

08002424 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800242c:	f7ff ff52 	bl	80022d4 <LL_RCC_GetAPB2Prescaler>
 8002430:	4603      	mov	r3, r0
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <RCC_GetPCLK2ClockFreq+0x24>)
 8002436:	5cd3      	ldrb	r3, [r2, r3]
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	40d3      	lsrs	r3, r2
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	08002740 	.word	0x08002740

0800244c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800245a:	f7ff ff47 	bl	80022ec <LL_RCC_PLL_GetMainSource>
 800245e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d003      	beq.n	8002476 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800246e:	e00b      	b.n	8002488 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002472:	607b      	str	r3, [r7, #4]
      break;
 8002474:	e00b      	b.n	800248e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002476:	f7ff ff51 	bl	800231c <LL_RCC_PLL_GetPrediv>
 800247a:	4603      	mov	r3, r0
 800247c:	3301      	adds	r3, #1
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	607b      	str	r3, [r7, #4]
      break;
 8002486:	e002      	b.n	800248e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800248a:	607b      	str	r3, [r7, #4]
      break;
 800248c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800248e:	f7ff ff39 	bl	8002304 <LL_RCC_PLL_GetMultiplicator>
 8002492:	4603      	mov	r3, r0
 8002494:	0c9b      	lsrs	r3, r3, #18
 8002496:	3302      	adds	r3, #2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	003d0900 	.word	0x003d0900
 80024ac:	007a1200 	.word	0x007a1200

080024b0 <LL_USART_IsEnabled>:
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c4:	bf0c      	ite	eq
 80024c6:	2301      	moveq	r3, #1
 80024c8:	2300      	movne	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <LL_USART_SetStopBitsLength>:
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	611a      	str	r2, [r3, #16]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <LL_USART_SetHWFlowCtrl>:
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	615a      	str	r2, [r3, #20]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
	...

08002520 <LL_USART_SetBaudRate>:
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	009a      	lsls	r2, r3, #2
 8002536:	441a      	add	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <LL_USART_SetBaudRate+0xb8>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b29b      	uxth	r3, r3
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	b299      	uxth	r1, r3
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009a      	lsls	r2, r3, #2
 8002558:	441a      	add	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002562:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <LL_USART_SetBaudRate+0xb8>)
 8002564:	fba3 0302 	umull	r0, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2064      	movs	r0, #100	; 0x64
 800256c:	fb00 f303 	mul.w	r3, r0, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	3332      	adds	r3, #50	; 0x32
 8002576:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <LL_USART_SetBaudRate+0xb8>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	b29b      	uxth	r3, r3
 8002580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002584:	b29b      	uxth	r3, r3
 8002586:	440b      	add	r3, r1
 8002588:	b299      	uxth	r1, r3
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	fbb2 f2f3 	udiv	r2, r2, r3
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <LL_USART_SetBaudRate+0xb8>)
 80025a0:	fba3 0302 	umull	r0, r3, r3, r2
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	2064      	movs	r0, #100	; 0x64
 80025a8:	fb00 f303 	mul.w	r3, r0, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3332      	adds	r3, #50	; 0x32
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <LL_USART_SetBaudRate+0xb8>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	440b      	add	r3, r1
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	51eb851f 	.word	0x51eb851f

080025dc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff5e 	bl	80024b0 <LL_USART_IsEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d145      	bne.n	8002686 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002602:	f023 030c 	bic.w	r3, r3, #12
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	6851      	ldr	r1, [r2, #4]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	4311      	orrs	r1, r2
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	6912      	ldr	r2, [r2, #16]
 8002614:	430a      	orrs	r2, r1
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff57 	bl	80024d6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7ff ff63 	bl	80024fa <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002634:	f107 0308 	add.w	r3, r7, #8
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fe7d 	bl	8002338 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a13      	ldr	r2, [pc, #76]	; (8002690 <LL_USART_Init+0xb4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d102      	bne.n	800264c <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	e00c      	b.n	8002666 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a11      	ldr	r2, [pc, #68]	; (8002694 <LL_USART_Init+0xb8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d102      	bne.n	800265a <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	e005      	b.n	8002666 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <LL_USART_Init+0xbc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002674:	2300      	movs	r3, #0
 8002676:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff4d 	bl	8002520 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002686:	7ffb      	ldrb	r3, [r7, #31]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40013800 	.word	0x40013800
 8002694:	40004400 	.word	0x40004400
 8002698:	40004800 	.word	0x40004800

0800269c <__libc_init_array>:
 800269c:	b570      	push	{r4, r5, r6, lr}
 800269e:	2600      	movs	r6, #0
 80026a0:	4d0c      	ldr	r5, [pc, #48]	; (80026d4 <__libc_init_array+0x38>)
 80026a2:	4c0d      	ldr	r4, [pc, #52]	; (80026d8 <__libc_init_array+0x3c>)
 80026a4:	1b64      	subs	r4, r4, r5
 80026a6:	10a4      	asrs	r4, r4, #2
 80026a8:	42a6      	cmp	r6, r4
 80026aa:	d109      	bne.n	80026c0 <__libc_init_array+0x24>
 80026ac:	f000 f822 	bl	80026f4 <_init>
 80026b0:	2600      	movs	r6, #0
 80026b2:	4d0a      	ldr	r5, [pc, #40]	; (80026dc <__libc_init_array+0x40>)
 80026b4:	4c0a      	ldr	r4, [pc, #40]	; (80026e0 <__libc_init_array+0x44>)
 80026b6:	1b64      	subs	r4, r4, r5
 80026b8:	10a4      	asrs	r4, r4, #2
 80026ba:	42a6      	cmp	r6, r4
 80026bc:	d105      	bne.n	80026ca <__libc_init_array+0x2e>
 80026be:	bd70      	pop	{r4, r5, r6, pc}
 80026c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c4:	4798      	blx	r3
 80026c6:	3601      	adds	r6, #1
 80026c8:	e7ee      	b.n	80026a8 <__libc_init_array+0xc>
 80026ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ce:	4798      	blx	r3
 80026d0:	3601      	adds	r6, #1
 80026d2:	e7f2      	b.n	80026ba <__libc_init_array+0x1e>
 80026d4:	08002750 	.word	0x08002750
 80026d8:	08002750 	.word	0x08002750
 80026dc:	08002750 	.word	0x08002750
 80026e0:	08002754 	.word	0x08002754

080026e4 <memset>:
 80026e4:	4603      	mov	r3, r0
 80026e6:	4402      	add	r2, r0
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d100      	bne.n	80026ee <memset+0xa>
 80026ec:	4770      	bx	lr
 80026ee:	f803 1b01 	strb.w	r1, [r3], #1
 80026f2:	e7f9      	b.n	80026e8 <memset+0x4>

080026f4 <_init>:
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	bf00      	nop
 80026f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026fa:	bc08      	pop	{r3}
 80026fc:	469e      	mov	lr, r3
 80026fe:	4770      	bx	lr

08002700 <_fini>:
 8002700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002702:	bf00      	nop
 8002704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002706:	bc08      	pop	{r3}
 8002708:	469e      	mov	lr, r3
 800270a:	4770      	bx	lr
