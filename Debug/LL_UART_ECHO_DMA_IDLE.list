
LL_UART_ECHO_DMA_IDLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800266c  0800266c  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  0800266c  0800266c  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800266c  0800266c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002670  08002670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  20000038  080026ac  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  080026ac  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c7b  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d84  00000000  00000000  00026cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00028a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  000291e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b18  00000000  00000000  00029868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008639  00000000  00000000  00041380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f4a  00000000  00000000  000499b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001be8  00000000  00000000  000cb958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	0800261c 	.word	0x0800261c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	0800261c 	.word	0x0800261c

0800014c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	f003 0310 	and.w	r3, r3, #16
 800015c:	2b10      	cmp	r3, #16
 800015e:	bf0c      	ite	eq
 8000160:	2301      	moveq	r3, #1
 8000162:	2300      	movne	r3, #0
 8000164:	b2db      	uxtb	r3, r3
}
 8000166:	4618      	mov	r0, r3
 8000168:	370c      	adds	r7, #12
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr

08000170 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800017e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8000186:	68fb      	ldr	r3, [r7, #12]
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr

08000192 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000192:	b480      	push	{r7}
 8000194:	b083      	sub	sp, #12
 8000196:	af00      	add	r7, sp, #0
 8000198:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	68db      	ldr	r3, [r3, #12]
 800019e:	f043 0210 	orr.w	r2, r3, #16
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	60da      	str	r2, [r3, #12]
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	695b      	ldr	r3, [r3, #20]
 80001bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	615a      	str	r2, [r3, #20]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80001ce:	b480      	push	{r7}
 80001d0:	b083      	sub	sp, #12
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	695b      	ldr	r3, [r3, #20]
 80001da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	615a      	str	r2, [r3, #20]
}
 80001e2:	bf00      	nop
 80001e4:	370c      	adds	r7, #12
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) & (USARTx->DR));
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3304      	adds	r3, #4
}
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
	...

08000204 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	3b01      	subs	r3, #1
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <LL_DMA_EnableChannel+0x38>)
 8000214:	5cd3      	ldrb	r3, [r2, r3]
 8000216:	461a      	mov	r2, r3
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4413      	add	r3, r2
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	683a      	ldr	r2, [r7, #0]
 8000220:	3a01      	subs	r2, #1
 8000222:	4906      	ldr	r1, [pc, #24]	; (800023c <LL_DMA_EnableChannel+0x38>)
 8000224:	5c8a      	ldrb	r2, [r1, r2]
 8000226:	4611      	mov	r1, r2
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	440a      	add	r2, r1
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	08002644 	.word	0x08002644

08000240 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LL_DMA_DisableChannel+0x38>)
 8000250:	5cd3      	ldrb	r3, [r2, r3]
 8000252:	461a      	mov	r2, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	4413      	add	r3, r2
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	3a01      	subs	r2, #1
 800025e:	4906      	ldr	r1, [pc, #24]	; (8000278 <LL_DMA_DisableChannel+0x38>)
 8000260:	5c8a      	ldrb	r2, [r1, r2]
 8000262:	4611      	mov	r1, r2
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	440a      	add	r2, r1
 8000268:	f023 0301 	bic.w	r3, r3, #1
 800026c:	6013      	str	r3, [r2, #0]
}
 800026e:	bf00      	nop
 8000270:	370c      	adds	r7, #12
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	08002644 	.word	0x08002644

0800027c <LL_DMA_ConfigTransfer>:
  *         @arg @ref LL_DMA_MDATAALIGN_BYTE or @ref LL_DMA_MDATAALIGN_HALFWORD or @ref LL_DMA_MDATAALIGN_WORD
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	3b01      	subs	r3, #1
 800028c:	4a0c      	ldr	r2, [pc, #48]	; (80002c0 <LL_DMA_ConfigTransfer+0x44>)
 800028e:	5cd3      	ldrb	r3, [r2, r3]
 8000290:	461a      	mov	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4413      	add	r3, r2
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800029c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	3a01      	subs	r2, #1
 80002a4:	4906      	ldr	r1, [pc, #24]	; (80002c0 <LL_DMA_ConfigTransfer+0x44>)
 80002a6:	5c8a      	ldrb	r2, [r1, r2]
 80002a8:	4611      	mov	r1, r2
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	440a      	add	r2, r1
 80002ae:	4611      	mov	r1, r2
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	4313      	orrs	r3, r2
 80002b4:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM | DMA_CCR_CIRC | DMA_CCR_PINC | DMA_CCR_MINC | DMA_CCR_PSIZE | DMA_CCR_MSIZE | DMA_CCR_PL,
             Configuration);
}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	08002644 	.word	0x08002644

080002c4 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	3b01      	subs	r3, #1
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <LL_DMA_GetDataTransferDirection+0x2c>)
 80002d4:	5cd3      	ldrb	r3, [r2, r3]
 80002d6:	461a      	mov	r2, r3
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4413      	add	r3, r2
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	f244 0310 	movw	r3, #16400	; 0x4010
 80002e2:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	08002644 	.word	0x08002644

080002f4 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	3b01      	subs	r3, #1
 8000304:	4a0b      	ldr	r2, [pc, #44]	; (8000334 <LL_DMA_SetDataLength+0x40>)
 8000306:	5cd3      	ldrb	r3, [r2, r3]
 8000308:	461a      	mov	r2, r3
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	4413      	add	r3, r2
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	0c1b      	lsrs	r3, r3, #16
 8000312:	041b      	lsls	r3, r3, #16
 8000314:	68ba      	ldr	r2, [r7, #8]
 8000316:	3a01      	subs	r2, #1
 8000318:	4906      	ldr	r1, [pc, #24]	; (8000334 <LL_DMA_SetDataLength+0x40>)
 800031a:	5c8a      	ldrb	r2, [r1, r2]
 800031c:	4611      	mov	r1, r2
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	440a      	add	r2, r1
 8000322:	4611      	mov	r1, r2
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	4313      	orrs	r3, r2
 8000328:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	08002644 	.word	0x08002644

08000338 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	3b01      	subs	r3, #1
 8000346:	4a06      	ldr	r2, [pc, #24]	; (8000360 <LL_DMA_GetDataLength+0x28>)
 8000348:	5cd3      	ldrb	r3, [r2, r3]
 800034a:	461a      	mov	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4413      	add	r3, r2
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8000354:	4618      	mov	r0, r3
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	08002644 	.word	0x08002644

08000364 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	2b10      	cmp	r3, #16
 8000376:	d114      	bne.n	80003a2 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	3b01      	subs	r3, #1
 800037c:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 800037e:	5cd3      	ldrb	r3, [r2, r3]
 8000380:	461a      	mov	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	4413      	add	r3, r2
 8000386:	461a      	mov	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	3b01      	subs	r3, #1
 8000390:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 8000392:	5cd3      	ldrb	r3, [r2, r3]
 8000394:	461a      	mov	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4413      	add	r3, r2
 800039a:	461a      	mov	r2, r3
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80003a0:	e013      	b.n	80003ca <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 80003a8:	5cd3      	ldrb	r3, [r2, r3]
 80003aa:	461a      	mov	r2, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	4413      	add	r3, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	3b01      	subs	r3, #1
 80003ba:	4a06      	ldr	r2, [pc, #24]	; (80003d4 <LL_DMA_ConfigAddresses+0x70>)
 80003bc:	5cd3      	ldrb	r3, [r2, r3]
 80003be:	461a      	mov	r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	4413      	add	r3, r2
 80003c4:	461a      	mov	r2, r3
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	60d3      	str	r3, [r2, #12]
}
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	08002644 	.word	0x08002644

080003d8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <LL_DMA_EnableIT_TC+0x38>)
 80003e8:	5cd3      	ldrb	r3, [r2, r3]
 80003ea:	461a      	mov	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4413      	add	r3, r2
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	3a01      	subs	r2, #1
 80003f6:	4906      	ldr	r1, [pc, #24]	; (8000410 <LL_DMA_EnableIT_TC+0x38>)
 80003f8:	5c8a      	ldrb	r2, [r1, r2]
 80003fa:	4611      	mov	r1, r2
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	440a      	add	r2, r1
 8000400:	f043 0302 	orr.w	r3, r3, #2
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr
 8000410:	08002644 	.word	0x08002644

08000414 <Init_LL_USART_IDLE>:

char InitMessage[] = "Hello Uart  115200kb/s \n\r";


void Init_LL_USART_IDLE(UART_DMA_Handle_Td *USARTX)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
	USARTX->Uart_ready_to_TX = true;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2201      	movs	r2, #1
 8000420:	731a      	strb	r2, [r3, #12]

	  Configure_DMA(USARTX);
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 f88e 	bl	8000544 <Configure_DMA>
	  StartTransfers(USARTX);
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 f865 	bl	80004f8 <StartTransfers>

	  uint16_t sizeInitMessage = sizeof(InitMessage)-1;
 800042e:	2319      	movs	r3, #25
 8000430:	81fb      	strh	r3, [r7, #14]
	  TUART_DMA_Trasmit(USARTX, (uint8_t *) InitMessage, sizeInitMessage, 0);
 8000432:	89fa      	ldrh	r2, [r7, #14]
 8000434:	2300      	movs	r3, #0
 8000436:	4904      	ldr	r1, [pc, #16]	; (8000448 <Init_LL_USART_IDLE+0x34>)
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 f807 	bl	800044c <TUART_DMA_Trasmit>
}
 800043e:	bf00      	nop
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000000 	.word	0x20000000

0800044c <TUART_DMA_Trasmit>:

void TUART_DMA_Trasmit(UART_DMA_Handle_Td *USARTX, uint8_t *txBuf, uint16_t size, uint32_t timeout)
{
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	b087      	sub	sp, #28
 8000450:	af02      	add	r7, sp, #8
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	4613      	mov	r3, r2
 800045a:	80fb      	strh	r3, [r7, #6]
	timeout=HAL_GetTick()+timeout;
 800045c:	f000 feb8 	bl	80011d0 <HAL_GetTick>
 8000460:	4602      	mov	r2, r0
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	4413      	add	r3, r2
 8000466:	603b      	str	r3, [r7, #0]

	while(USARTX->Uart_ready_to_TX != true)
 8000468:	e006      	b.n	8000478 <TUART_DMA_Trasmit+0x2c>
	{
		if(HAL_GetTick() > timeout )
 800046a:	f000 feb1 	bl	80011d0 <HAL_GetTick>
 800046e:	4602      	mov	r2, r0
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	4293      	cmp	r3, r2
 8000474:	d308      	bcc.n	8000488 <TUART_DMA_Trasmit+0x3c>
			{
				break;
			}
		else
			{
				continue;
 8000476:	bf00      	nop
	while(USARTX->Uart_ready_to_TX != true)
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	7b1b      	ldrb	r3, [r3, #12]
 800047c:	f083 0301 	eor.w	r3, r3, #1
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d1f1      	bne.n	800046a <TUART_DMA_Trasmit+0x1e>
 8000486:	e000      	b.n	800048a <TUART_DMA_Trasmit+0x3e>
				break;
 8000488:	bf00      	nop
			}
	}

	if(USARTX->Uart_ready_to_TX == true)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	7b1b      	ldrb	r3, [r3, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d02c      	beq.n	80004ec <TUART_DMA_Trasmit+0xa0>
	{
		USARTX->Uart_ready_to_TX = false;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	2200      	movs	r2, #0
 8000496:	731a      	strb	r2, [r3, #12]

		LL_DMA_DisableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	4619      	mov	r1, r3
 800049e:	4815      	ldr	r0, [pc, #84]	; (80004f4 <TUART_DMA_Trasmit+0xa8>)
 80004a0:	f7ff fece 	bl	8000240 <LL_DMA_DisableChannel>

	  /* It should be */
		  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	689c      	ldr	r4, [r3, #8]
 80004a8:	68bd      	ldr	r5, [r7, #8]
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff fe9c 	bl	80001ec <LL_USART_DMA_GetRegAddr>
 80004b4:	4606      	mov	r6, r0
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4619      	mov	r1, r3
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <TUART_DMA_Trasmit+0xa8>)
 80004be:	f7ff ff01 	bl	80002c4 <LL_DMA_GetDataTransferDirection>
 80004c2:	4603      	mov	r3, r0
 80004c4:	9300      	str	r3, [sp, #0]
 80004c6:	4633      	mov	r3, r6
 80004c8:	462a      	mov	r2, r5
 80004ca:	4621      	mov	r1, r4
 80004cc:	4809      	ldr	r0, [pc, #36]	; (80004f4 <TUART_DMA_Trasmit+0xa8>)
 80004ce:	f7ff ff49 	bl	8000364 <LL_DMA_ConfigAddresses>
		                        (uint32_t) txBuf,
		                         LL_USART_DMA_GetRegAddr(USARTX->Instance),
		                         LL_DMA_GetDataTransferDirection(DMA1,USARTX->UART_DMA_TX_CHANNEL));

		LL_DMA_SetDataLength(DMA1, USARTX->UART_DMA_TX_CHANNEL, size);
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	88fa      	ldrh	r2, [r7, #6]
 80004d8:	4619      	mov	r1, r3
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <TUART_DMA_Trasmit+0xa8>)
 80004dc:	f7ff ff0a 	bl	80002f4 <LL_DMA_SetDataLength>

		LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4619      	mov	r1, r3
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <TUART_DMA_Trasmit+0xa8>)
 80004e8:	f7ff fe8c 	bl	8000204 <LL_DMA_EnableChannel>
	}

}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	40020000 	.word	0x40020000

080004f8 <StartTransfers>:

void StartTransfers(UART_DMA_Handle_Td *USARTX)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	LL_USART_EnableDMAReq_RX(USARTX->Instance);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe53 	bl	80001b0 <LL_USART_EnableDMAReq_RX>
	LL_USART_EnableDMAReq_TX(USARTX->Instance);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fe5d 	bl	80001ce <LL_USART_EnableDMAReq_TX>
	LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	4619      	mov	r1, r3
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <StartTransfers+0x48>)
 800051c:	f7ff fe72 	bl	8000204 <LL_DMA_EnableChannel>
	LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4619      	mov	r1, r3
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <StartTransfers+0x48>)
 8000528:	f7ff fe6c 	bl	8000204 <LL_DMA_EnableChannel>
	LL_USART_EnableIT_IDLE(USARTX->Instance);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fe2e 	bl	8000192 <LL_USART_EnableIT_IDLE>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40020000 	.word	0x40020000

08000544 <Configure_DMA>:


void Configure_DMA(UART_DMA_Handle_Td *USARTX)
{
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	b085      	sub	sp, #20
 8000548:	af02      	add	r7, sp, #8
 800054a:	6078      	str	r0, [r7, #4]

  LL_DMA_ConfigTransfer(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f242 0290 	movw	r2, #8336	; 0x2090
 8000554:	4619      	mov	r1, r3
 8000556:	482a      	ldr	r0, [pc, #168]	; (8000600 <Configure_DMA+0xbc>)
 8000558:	f7ff fe90 	bl	800027c <LL_DMA_ConfigTransfer>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	689c      	ldr	r4, [r3, #8]
                         (uint32_t)USARTX->UART_DMA_TX_Buffer,
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	699b      	ldr	r3, [r3, #24]
  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_TX_CHANNEL,
 8000564:	461e      	mov	r6, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff fe3e 	bl	80001ec <LL_USART_DMA_GetRegAddr>
 8000570:	4605      	mov	r5, r0
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	4619      	mov	r1, r3
 8000578:	4821      	ldr	r0, [pc, #132]	; (8000600 <Configure_DMA+0xbc>)
 800057a:	f7ff fea3 	bl	80002c4 <LL_DMA_GetDataTransferDirection>
 800057e:	4603      	mov	r3, r0
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	462b      	mov	r3, r5
 8000584:	4632      	mov	r2, r6
 8000586:	4621      	mov	r1, r4
 8000588:	481d      	ldr	r0, [pc, #116]	; (8000600 <Configure_DMA+0xbc>)
 800058a:	f7ff feeb 	bl	8000364 <LL_DMA_ConfigAddresses>
                         LL_USART_DMA_GetRegAddr(USARTX->Instance),
                         LL_DMA_GetDataTransferDirection(DMA1, USARTX->UART_DMA_TX_CHANNEL));

  LL_DMA_ConfigTransfer(DMA1, USARTX->UART_DMA_RX_CHANNEL,
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	f44f 5202 	mov.w	r2, #8320	; 0x2080
 8000596:	4619      	mov	r1, r3
 8000598:	4819      	ldr	r0, [pc, #100]	; (8000600 <Configure_DMA+0xbc>)
 800059a:	f7ff fe6f 	bl	800027c <LL_DMA_ConfigTransfer>
                        LL_DMA_MODE_NORMAL                |
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_RX_CHANNEL,
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	685c      	ldr	r4, [r3, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe20 	bl	80001ec <LL_USART_DMA_GetRegAddr>
 80005ac:	4605      	mov	r5, r0
                         LL_USART_DMA_GetRegAddr(USARTX->Instance),
						 (uint32_t) USARTX->UART_DMA_RX_Buffer,
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	69db      	ldr	r3, [r3, #28]
  LL_DMA_ConfigAddresses(DMA1, USARTX->UART_DMA_RX_CHANNEL,
 80005b2:	461e      	mov	r6, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	4619      	mov	r1, r3
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <Configure_DMA+0xbc>)
 80005bc:	f7ff fe82 	bl	80002c4 <LL_DMA_GetDataTransferDirection>
 80005c0:	4603      	mov	r3, r0
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	4633      	mov	r3, r6
 80005c6:	462a      	mov	r2, r5
 80005c8:	4621      	mov	r1, r4
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <Configure_DMA+0xbc>)
 80005cc:	f7ff feca 	bl	8000364 <LL_DMA_ConfigAddresses>
                         LL_DMA_GetDataTransferDirection(DMA1, USARTX->UART_DMA_RX_CHANNEL));
  LL_DMA_SetDataLength(DMA1, USARTX->UART_DMA_RX_CHANNEL, USARTX->ReceiveBufforSize);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6859      	ldr	r1, [r3, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	461a      	mov	r2, r3
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <Configure_DMA+0xbc>)
 80005dc:	f7ff fe8a 	bl	80002f4 <LL_DMA_SetDataLength>

  /* (5) Enable DMA transfer complete*/
  LL_DMA_EnableIT_TC(DMA1, USARTX->UART_DMA_TX_CHANNEL);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <Configure_DMA+0xbc>)
 80005e8:	f7ff fef6 	bl	80003d8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TC(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <Configure_DMA+0xbc>)
 80005f4:	f7ff fef0 	bl	80003d8 <LL_DMA_EnableIT_TC>
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	40020000 	.word	0x40020000

08000604 <USART_IDLE_CallBack>:

void USART_IDLE_CallBack(UART_DMA_Handle_Td *USARTX)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if(LL_USART_IsActiveFlag_IDLE(USARTX->Instance) )
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff fd9b 	bl	800014c <LL_USART_IsActiveFlag_IDLE>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d007      	beq.n	800062c <USART_IDLE_CallBack+0x28>
	{
		LL_USART_ClearFlag_IDLE(USARTX->Instance);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fda5 	bl	8000170 <LL_USART_ClearFlag_IDLE>
		UART_DMA_ReceiveComplete_Callback(USARTX);
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f804 	bl	8000634 <UART_DMA_ReceiveComplete_Callback>
	}
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <UART_DMA_ReceiveComplete_Callback>:



void UART_DMA_ReceiveComplete_Callback(UART_DMA_Handle_Td *USARTX)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	LL_DMA_DisableChannel(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4619      	mov	r1, r3
 8000642:	4812      	ldr	r0, [pc, #72]	; (800068c <UART_DMA_ReceiveComplete_Callback+0x58>)
 8000644:	f7ff fdfc 	bl	8000240 <LL_DMA_DisableChannel>
 	 USARTX->ubReceptionComplete = true;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2201      	movs	r2, #1
 800064c:	735a      	strb	r2, [r3, #13]

  	USARTX->NbofRecData=USARTX->ReceiveBufforSize - LL_DMA_GetDataLength(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	691c      	ldr	r4, [r3, #16]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	4619      	mov	r1, r3
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <UART_DMA_ReceiveComplete_Callback+0x58>)
 800065a:	f7ff fe6d 	bl	8000338 <LL_DMA_GetDataLength>
 800065e:	4603      	mov	r3, r0
 8000660:	1ae2      	subs	r2, r4, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	615a      	str	r2, [r3, #20]
  	LL_DMA_SetDataLength(DMA1, USARTX->UART_DMA_RX_CHANNEL, USARTX->ReceiveBufforSize);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6859      	ldr	r1, [r3, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	461a      	mov	r2, r3
 8000670:	4806      	ldr	r0, [pc, #24]	; (800068c <UART_DMA_ReceiveComplete_Callback+0x58>)
 8000672:	f7ff fe3f 	bl	80002f4 <LL_DMA_SetDataLength>
 	LL_DMA_EnableChannel(DMA1, USARTX->UART_DMA_RX_CHANNEL);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <UART_DMA_ReceiveComplete_Callback+0x58>)
 800067e:	f7ff fdc1 	bl	8000204 <LL_DMA_EnableChannel>
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000

08000690 <UART_DMA_TransmitComplete_Callback>:

void UART_DMA_TransmitComplete_Callback(UART_DMA_Handle_Td *USARTX)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 USARTX->Uart_ready_to_TX = true;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	731a      	strb	r2, [r3, #12]
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db0b      	blt.n	80006ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 021f 	and.w	r2, r3, #31
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <__NVIC_EnableIRQ+0x34>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_DMA_Init+0x68>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_DMA_Init+0x68>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_DMA_Init+0x68>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007d2:	f7ff ff69 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ffb7 	bl	8000750 <NVIC_EncodePriority>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4619      	mov	r1, r3
 80007e6:	2010      	movs	r0, #16
 80007e8:	f7ff ff88 	bl	80006fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80007ec:	2010      	movs	r0, #16
 80007ee:	f7ff ff69 	bl	80006c4 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007f2:	f7ff ff59 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffa7 	bl	8000750 <NVIC_EncodePriority>
 8000802:	4603      	mov	r3, r0
 8000804:	4619      	mov	r1, r3
 8000806:	2011      	movs	r0, #17
 8000808:	f7ff ff78 	bl	80006fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800080c:	2011      	movs	r0, #17
 800080e:	f7ff ff59 	bl	80006c4 <__NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000

08000820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0xcc>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <MX_GPIO_Init+0xcc>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0xcc>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0310 	and.w	r3, r3, #16
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084c:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_GPIO_Init+0xcc>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a26      	ldr	r2, [pc, #152]	; (80008ec <MX_GPIO_Init+0xcc>)
 8000852:	f043 0320 	orr.w	r3, r3, #32
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b24      	ldr	r3, [pc, #144]	; (80008ec <MX_GPIO_Init+0xcc>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0320 	and.w	r3, r3, #32
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_GPIO_Init+0xcc>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a20      	ldr	r2, [pc, #128]	; (80008ec <MX_GPIO_Init+0xcc>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_GPIO_Init+0xcc>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0304 	and.w	r3, r3, #4
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_GPIO_Init+0xcc>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <MX_GPIO_Init+0xcc>)
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_GPIO_Init+0xcc>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0308 	and.w	r3, r3, #8
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	2120      	movs	r1, #32
 8000898:	4815      	ldr	r0, [pc, #84]	; (80008f0 <MX_GPIO_Init+0xd0>)
 800089a:	f000 ff35 	bl	8001708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_GPIO_Init+0xd4>)
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_GPIO_Init+0xd8>)
 80008b4:	f000 fda4 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LDG_Pin;
 80008b8:	2320      	movs	r3, #32
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0310 	add.w	r3, r7, #16
 80008cc:	4619      	mov	r1, r3
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <MX_GPIO_Init+0xd0>)
 80008d0:	f000 fd96 	bl	8001400 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2028      	movs	r0, #40	; 0x28
 80008da:	f000 fd5a 	bl	8001392 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008de:	2028      	movs	r0, #40	; 0x28
 80008e0:	f000 fd73 	bl	80013ca <HAL_NVIC_EnableIRQ>

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800
 80008f4:	10110000 	.word	0x10110000
 80008f8:	40011000 	.word	0x40011000

080008fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008fc:	b598      	push	{r3, r4, r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000900:	f000 fc0e 	bl	8001120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000904:	f000 f84e 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f7ff ff8a 	bl	8000820 <MX_GPIO_Init>
  MX_DMA_Init();
 800090c:	f7ff ff52 	bl	80007b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000910:	f000 fb32 	bl	8000f78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  TUART2.Instance=USART2;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <main+0x90>)
 8000916:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <main+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  TUART2.UART_DMA_RX_CHANNEL=LL_DMA_CHANNEL_6;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <main+0x90>)
 800091c:	2206      	movs	r2, #6
 800091e:	605a      	str	r2, [r3, #4]
  TUART2.UART_DMA_TX_CHANNEL=LL_DMA_CHANNEL_7;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <main+0x90>)
 8000922:	2207      	movs	r2, #7
 8000924:	609a      	str	r2, [r3, #8]
  TUART2.ReceiveBufforSize=1655;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <main+0x90>)
 8000928:	f240 6277 	movw	r2, #1655	; 0x677
 800092c:	611a      	str	r2, [r3, #16]
  TUART2.UART_DMA_RX_Buffer=rx_BUF;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <main+0x90>)
 8000930:	4a18      	ldr	r2, [pc, #96]	; (8000994 <main+0x98>)
 8000932:	61da      	str	r2, [r3, #28]

  Init_LL_USART_IDLE(&TUART2);
 8000934:	4815      	ldr	r0, [pc, #84]	; (800098c <main+0x90>)
 8000936:	f7ff fd6d 	bl	8000414 <Init_LL_USART_IDLE>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint32_t LedTimer=0;
	  if(LedTimer+500 < HAL_GetTick())
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <main+0x9c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8000942:	f000 fc45 	bl	80011d0 <HAL_GetTick>
 8000946:	4603      	mov	r3, r0
 8000948:	429c      	cmp	r4, r3
 800094a:	d20e      	bcs.n	800096a <main+0x6e>
	  {
		  LedTimer = HAL_GetTick();
 800094c:	f000 fc40 	bl	80011d0 <HAL_GetTick>
 8000950:	4603      	mov	r3, r0
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <main+0x9c>)
 8000954:	6013      	str	r3, [r2, #0]

		  HAL_GPIO_TogglePin(LDG_GPIO_Port, LDG_Pin);
 8000956:	2120      	movs	r1, #32
 8000958:	4810      	ldr	r0, [pc, #64]	; (800099c <main+0xa0>)
 800095a:	f000 feed 	bl	8001738 <HAL_GPIO_TogglePin>
		  TUART_DMA_Trasmit(&TUART2,ex_message, sizeof(ex_message)-1, 0);
 800095e:	2300      	movs	r3, #0
 8000960:	220c      	movs	r2, #12
 8000962:	490f      	ldr	r1, [pc, #60]	; (80009a0 <main+0xa4>)
 8000964:	4809      	ldr	r0, [pc, #36]	; (800098c <main+0x90>)
 8000966:	f7ff fd71 	bl	800044c <TUART_DMA_Trasmit>
	  }
	  //Echo response
	  if(TUART2.ubReceptionComplete)
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <main+0x90>)
 800096c:	7b5b      	ldrb	r3, [r3, #13]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0e3      	beq.n	800093a <main+0x3e>
	  {
		  TUART_DMA_Trasmit(&TUART2,TUART2.UART_DMA_RX_Buffer, TUART2.NbofRecData, 0);
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <main+0x90>)
 8000974:	69d9      	ldr	r1, [r3, #28]
 8000976:	4b05      	ldr	r3, [pc, #20]	; (800098c <main+0x90>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	b29a      	uxth	r2, r3
 800097c:	2300      	movs	r3, #0
 800097e:	4803      	ldr	r0, [pc, #12]	; (800098c <main+0x90>)
 8000980:	f7ff fd64 	bl	800044c <TUART_DMA_Trasmit>
		  TUART2.ubReceptionComplete=false;
 8000984:	4b01      	ldr	r3, [pc, #4]	; (800098c <main+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	735a      	strb	r2, [r3, #13]
  {
 800098a:	e7d6      	b.n	800093a <main+0x3e>
 800098c:	200006d0 	.word	0x200006d0
 8000990:	40004400 	.word	0x40004400
 8000994:	20000058 	.word	0x20000058
 8000998:	20000054 	.word	0x20000054
 800099c:	40010800 	.word	0x40010800
 80009a0:	2000001c 	.word	0x2000001c

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b090      	sub	sp, #64	; 0x40
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2228      	movs	r2, #40	; 0x28
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fe2a 	bl	800260c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	2310      	movs	r3, #16
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009da:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fee3 	bl	80017b0 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80009f0:	f000 f819 	bl	8000a26 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	2302      	movs	r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 f94e 	bl	8001cb0 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a1a:	f000 f804 	bl	8000a26 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3740      	adds	r7, #64	; 0x40
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2a:	b672      	cpsid	i
}
 8000a2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x60>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_MspInit+0x60>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000

08000a94 <LL_DMA_IsActiveFlag_TC6>:
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000aa8:	bf0c      	ite	eq
 8000aaa:	2301      	moveq	r3, #1
 8000aac:	2300      	movne	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <LL_DMA_IsActiveFlag_TC7>:
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <LL_DMA_ClearFlag_GI6>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000aee:	605a      	str	r2, [r3, #4]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <LL_DMA_ClearFlag_GI7>:
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b08:	605a      	str	r2, [r3, #4]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5a:	f000 fb27 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	//The shouldn't never go here
	  if(LL_DMA_IsActiveFlag_TC6(DMA1))
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <DMA1_Channel6_IRQHandler+0x20>)
 8000b6a:	f7ff ff93 	bl	8000a94 <LL_DMA_IsActiveFlag_TC6>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d005      	beq.n	8000b80 <DMA1_Channel6_IRQHandler+0x1c>
	  {
	    LL_DMA_ClearFlag_GI6(DMA1);
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <DMA1_Channel6_IRQHandler+0x20>)
 8000b76:	f7ff ffb3 	bl	8000ae0 <LL_DMA_ClearFlag_GI6>
	    /* Call function Reception complete Callback */
	    UART_DMA_ReceiveComplete_Callback(&TUART2);
 8000b7a:	4803      	ldr	r0, [pc, #12]	; (8000b88 <DMA1_Channel6_IRQHandler+0x24>)
 8000b7c:	f7ff fd5a 	bl	8000634 <UART_DMA_ReceiveComplete_Callback>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40020000 	.word	0x40020000
 8000b88:	200006d0 	.word	0x200006d0

08000b8c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	  if(LL_DMA_IsActiveFlag_TC7(DMA1))
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <DMA1_Channel7_IRQHandler+0x20>)
 8000b92:	f7ff ff92 	bl	8000aba <LL_DMA_IsActiveFlag_TC7>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <DMA1_Channel7_IRQHandler+0x1c>
	  {
	    LL_DMA_ClearFlag_GI7(DMA1);
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <DMA1_Channel7_IRQHandler+0x20>)
 8000b9e:	f7ff ffac 	bl	8000afa <LL_DMA_ClearFlag_GI7>
	    /* Call function Transmission complete Callback */
	    UART_DMA_TransmitComplete_Callback(&TUART2);
 8000ba2:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <DMA1_Channel7_IRQHandler+0x24>)
 8000ba4:	f7ff fd74 	bl	8000690 <UART_DMA_TransmitComplete_Callback>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	200006d0 	.word	0x200006d0

08000bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART_IDLE_CallBack(&TUART2);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <USART2_IRQHandler+0x10>)
 8000bba:	f7ff fd23 	bl	8000604 <USART_IDLE_CallBack>
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200006d0 	.word	0x200006d0

08000bc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bcc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bd0:	f000 fdcc 	bl	800176c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <__NVIC_GetPriorityGrouping>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4906      	ldr	r1, [pc, #24]	; (8000c34 <__NVIC_EnableIRQ+0x34>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <LL_USART_Enable>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60da      	str	r2, [r3, #12]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <LL_USART_ConfigAsyncMode>:
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	615a      	str	r2, [r3, #20]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d42:	69da      	ldr	r2, [r3, #28]
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000

08000d68 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	4907      	ldr	r1, [pc, #28]	; (8000d94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d7e:	699a      	ldr	r2, [r3, #24]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4013      	ands	r3, r2
 8000d84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d86:	68fb      	ldr	r3, [r7, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000

08000d98 <LL_DMA_SetDataTransferDirection>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <LL_DMA_SetDataTransferDirection+0x44>)
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	461a      	mov	r2, r3
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	4413      	add	r3, r2
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000db8:	f023 0310 	bic.w	r3, r3, #16
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	4906      	ldr	r1, [pc, #24]	; (8000ddc <LL_DMA_SetDataTransferDirection+0x44>)
 8000dc2:	5c8a      	ldrb	r2, [r1, r2]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	440a      	add	r2, r1
 8000dca:	4611      	mov	r1, r2
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	600b      	str	r3, [r1, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	08002664 	.word	0x08002664

08000de0 <LL_DMA_SetMode>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LL_DMA_SetMode+0x40>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	461a      	mov	r2, r3
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4413      	add	r3, r2
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f023 0220 	bic.w	r2, r3, #32
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	4906      	ldr	r1, [pc, #24]	; (8000e20 <LL_DMA_SetMode+0x40>)
 8000e06:	5ccb      	ldrb	r3, [r1, r3]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	440b      	add	r3, r1
 8000e0e:	4619      	mov	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	08002664 	.word	0x08002664

08000e24 <LL_DMA_SetPeriphIncMode>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LL_DMA_SetPeriphIncMode+0x40>)
 8000e36:	5cd3      	ldrb	r3, [r2, r3]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	4906      	ldr	r1, [pc, #24]	; (8000e64 <LL_DMA_SetPeriphIncMode+0x40>)
 8000e4a:	5ccb      	ldrb	r3, [r1, r3]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	440b      	add	r3, r1
 8000e52:	4619      	mov	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	08002664 	.word	0x08002664

08000e68 <LL_DMA_SetMemoryIncMode>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	4906      	ldr	r1, [pc, #24]	; (8000ea8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000e8e:	5ccb      	ldrb	r3, [r1, r3]
 8000e90:	4619      	mov	r1, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	440b      	add	r3, r1
 8000e96:	4619      	mov	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	08002664 	.word	0x08002664

08000eac <LL_DMA_SetPeriphSize>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LL_DMA_SetPeriphSize+0x40>)
 8000ebe:	5cd3      	ldrb	r3, [r2, r3]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	4906      	ldr	r1, [pc, #24]	; (8000eec <LL_DMA_SetPeriphSize+0x40>)
 8000ed2:	5ccb      	ldrb	r3, [r1, r3]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	440b      	add	r3, r1
 8000eda:	4619      	mov	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	08002664 	.word	0x08002664

08000ef0 <LL_DMA_SetMemorySize>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	4a0b      	ldr	r2, [pc, #44]	; (8000f30 <LL_DMA_SetMemorySize+0x40>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	461a      	mov	r2, r3
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	4906      	ldr	r1, [pc, #24]	; (8000f30 <LL_DMA_SetMemorySize+0x40>)
 8000f16:	5ccb      	ldrb	r3, [r1, r3]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	440b      	add	r3, r1
 8000f1e:	4619      	mov	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
}
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	08002664 	.word	0x08002664

08000f34 <LL_DMA_SetChannelPriorityLevel>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000f46:	5cd3      	ldrb	r3, [r2, r3]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4906      	ldr	r1, [pc, #24]	; (8000f74 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000f5a:	5ccb      	ldrb	r3, [r1, r3]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	440b      	add	r3, r1
 8000f62:	4619      	mov	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	08002664 	.word	0x08002664

08000f78 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08c      	sub	sp, #48	; 0x30
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	611a      	str	r2, [r3, #16]
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	463b      	mov	r3, r7
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000fa0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000fa4:	f7ff fec8 	bl	8000d38 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000fa8:	2004      	movs	r0, #4
 8000faa:	f7ff fedd 	bl	8000d68 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000fae:	f240 4304 	movw	r3, #1028	; 0x404
 8000fb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4840      	ldr	r0, [pc, #256]	; (80010c8 <MX_USART2_UART_Init+0x150>)
 8000fc6:	f001 f893 	bl	80020f0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000fca:	f640 0308 	movw	r3, #2056	; 0x808
 8000fce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fd0:	2309      	movs	r3, #9
 8000fd2:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	483b      	ldr	r0, [pc, #236]	; (80010c8 <MX_USART2_UART_Init+0x150>)
 8000fda:	f001 f889 	bl	80020f0 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2106      	movs	r1, #6
 8000fe2:	483a      	ldr	r0, [pc, #232]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8000fe4:	f7ff fed8 	bl	8000d98 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2106      	movs	r1, #6
 8000fec:	4837      	ldr	r0, [pc, #220]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8000fee:	f7ff ffa1 	bl	8000f34 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2106      	movs	r1, #6
 8000ff6:	4835      	ldr	r0, [pc, #212]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8000ff8:	f7ff fef2 	bl	8000de0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2106      	movs	r1, #6
 8001000:	4832      	ldr	r0, [pc, #200]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8001002:	f7ff ff0f 	bl	8000e24 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	2106      	movs	r1, #6
 800100a:	4830      	ldr	r0, [pc, #192]	; (80010cc <MX_USART2_UART_Init+0x154>)
 800100c:	f7ff ff2c 	bl	8000e68 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8001010:	2200      	movs	r2, #0
 8001012:	2106      	movs	r1, #6
 8001014:	482d      	ldr	r0, [pc, #180]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8001016:	f7ff ff49 	bl	8000eac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800101a:	2200      	movs	r2, #0
 800101c:	2106      	movs	r1, #6
 800101e:	482b      	ldr	r0, [pc, #172]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8001020:	f7ff ff66 	bl	8000ef0 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001024:	2210      	movs	r2, #16
 8001026:	2107      	movs	r1, #7
 8001028:	4828      	ldr	r0, [pc, #160]	; (80010cc <MX_USART2_UART_Init+0x154>)
 800102a:	f7ff feb5 	bl	8000d98 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 800102e:	2200      	movs	r2, #0
 8001030:	2107      	movs	r1, #7
 8001032:	4826      	ldr	r0, [pc, #152]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8001034:	f7ff ff7e 	bl	8000f34 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001038:	2200      	movs	r2, #0
 800103a:	2107      	movs	r1, #7
 800103c:	4823      	ldr	r0, [pc, #140]	; (80010cc <MX_USART2_UART_Init+0x154>)
 800103e:	f7ff fecf 	bl	8000de0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8001042:	2200      	movs	r2, #0
 8001044:	2107      	movs	r1, #7
 8001046:	4821      	ldr	r0, [pc, #132]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8001048:	f7ff feec 	bl	8000e24 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	2107      	movs	r1, #7
 8001050:	481e      	ldr	r0, [pc, #120]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8001052:	f7ff ff09 	bl	8000e68 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001056:	2200      	movs	r2, #0
 8001058:	2107      	movs	r1, #7
 800105a:	481c      	ldr	r0, [pc, #112]	; (80010cc <MX_USART2_UART_Init+0x154>)
 800105c:	f7ff ff26 	bl	8000eac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8001060:	2200      	movs	r2, #0
 8001062:	2107      	movs	r1, #7
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <MX_USART2_UART_Init+0x154>)
 8001066:	f7ff ff43 	bl	8000ef0 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800106a:	f7ff fdbb 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 800106e:	4603      	mov	r3, r0
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe09 	bl	8000c8c <NVIC_EncodePriority>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	2026      	movs	r0, #38	; 0x26
 8001080:	f7ff fdda 	bl	8000c38 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001084:	2026      	movs	r0, #38	; 0x26
 8001086:	f7ff fdbb 	bl	8000c00 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800108a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800108e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800109c:	230c      	movs	r3, #12
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <MX_USART2_UART_Init+0x158>)
 80010b0:	f001 fa28 	bl	8002504 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_USART2_UART_Init+0x158>)
 80010b6:	f7ff fe2a 	bl	8000d0e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USART2_UART_Init+0x158>)
 80010bc:	f7ff fe18 	bl	8000cf0 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3730      	adds	r7, #48	; 0x30
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40010800 	.word	0x40010800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40004400 	.word	0x40004400

080010d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010d6:	e003      	b.n	80010e0 <LoopCopyDataInit>

080010d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010de:	3104      	adds	r1, #4

080010e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010e0:	480a      	ldr	r0, [pc, #40]	; (800110c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010e8:	d3f6      	bcc.n	80010d8 <CopyDataInit>
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010ec:	e002      	b.n	80010f4 <LoopFillZerobss>

080010ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010f0:	f842 3b04 	str.w	r3, [r2], #4

080010f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010f8:	d3f9      	bcc.n	80010ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010fa:	f7ff fd6d 	bl	8000bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010fe:	f001 fa61 	bl	80025c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001102:	f7ff fbfb 	bl	80008fc <main>
  bx lr
 8001106:	4770      	bx	lr
  ldr r3, =_sidata
 8001108:	08002674 	.word	0x08002674
  ldr r0, =_sdata
 800110c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001110:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 8001114:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 8001118:	200006f4 	.word	0x200006f4

0800111c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC1_2_IRQHandler>
	...

08001120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_Init+0x28>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_Init+0x28>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f923 	bl	800137c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff fc78 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f93b 	bl	80013e6 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f903 	bl	8001392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	2000002c 	.word	0x2000002c
 80011a4:	20000034 	.word	0x20000034
 80011a8:	20000030 	.word	0x20000030

080011ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_IncTick+0x1c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_IncTick+0x20>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a03      	ldr	r2, [pc, #12]	; (80011cc <HAL_IncTick+0x20>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	20000034 	.word	0x20000034
 80011cc:	200006f0 	.word	0x200006f0

080011d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <HAL_GetTick+0x10>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	200006f0 	.word	0x200006f0

080011e4 <__NVIC_SetPriorityGrouping>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800120c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	60d3      	str	r3, [r2, #12]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <__NVIC_GetPriorityGrouping>:
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4906      	ldr	r1, [pc, #24]	; (800127c <__NVIC_EnableIRQ+0x34>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	; (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001348:	d301      	bcc.n	800134e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134a:	2301      	movs	r3, #1
 800134c:	e00f      	b.n	800136e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <SysTick_Config+0x40>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001356:	210f      	movs	r1, #15
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f7ff ff90 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x40>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ff2d 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a4:	f7ff ff42 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	68b9      	ldr	r1, [r7, #8]
 80013ae:	6978      	ldr	r0, [r7, #20]
 80013b0:	f7ff ff90 	bl	80012d4 <NVIC_EncodePriority>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	4611      	mov	r1, r2
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff5f 	bl	8001280 <__NVIC_SetPriority>
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff35 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffa2 	bl	8001338 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b08b      	sub	sp, #44	; 0x2c
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001412:	e169      	b.n	80016e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001414:	2201      	movs	r2, #1
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	429a      	cmp	r2, r3
 800142e:	f040 8158 	bne.w	80016e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a9a      	ldr	r2, [pc, #616]	; (80016a0 <HAL_GPIO_Init+0x2a0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d05e      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 800143c:	4a98      	ldr	r2, [pc, #608]	; (80016a0 <HAL_GPIO_Init+0x2a0>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d875      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001442:	4a98      	ldr	r2, [pc, #608]	; (80016a4 <HAL_GPIO_Init+0x2a4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d058      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001448:	4a96      	ldr	r2, [pc, #600]	; (80016a4 <HAL_GPIO_Init+0x2a4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d86f      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800144e:	4a96      	ldr	r2, [pc, #600]	; (80016a8 <HAL_GPIO_Init+0x2a8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d052      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001454:	4a94      	ldr	r2, [pc, #592]	; (80016a8 <HAL_GPIO_Init+0x2a8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d869      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800145a:	4a94      	ldr	r2, [pc, #592]	; (80016ac <HAL_GPIO_Init+0x2ac>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d04c      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 8001460:	4a92      	ldr	r2, [pc, #584]	; (80016ac <HAL_GPIO_Init+0x2ac>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d863      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001466:	4a92      	ldr	r2, [pc, #584]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d046      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
 800146c:	4a90      	ldr	r2, [pc, #576]	; (80016b0 <HAL_GPIO_Init+0x2b0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d85d      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 8001472:	2b12      	cmp	r3, #18
 8001474:	d82a      	bhi.n	80014cc <HAL_GPIO_Init+0xcc>
 8001476:	2b12      	cmp	r3, #18
 8001478:	d859      	bhi.n	800152e <HAL_GPIO_Init+0x12e>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <HAL_GPIO_Init+0x80>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	080014fb 	.word	0x080014fb
 8001484:	080014d5 	.word	0x080014d5
 8001488:	080014e7 	.word	0x080014e7
 800148c:	08001529 	.word	0x08001529
 8001490:	0800152f 	.word	0x0800152f
 8001494:	0800152f 	.word	0x0800152f
 8001498:	0800152f 	.word	0x0800152f
 800149c:	0800152f 	.word	0x0800152f
 80014a0:	0800152f 	.word	0x0800152f
 80014a4:	0800152f 	.word	0x0800152f
 80014a8:	0800152f 	.word	0x0800152f
 80014ac:	0800152f 	.word	0x0800152f
 80014b0:	0800152f 	.word	0x0800152f
 80014b4:	0800152f 	.word	0x0800152f
 80014b8:	0800152f 	.word	0x0800152f
 80014bc:	0800152f 	.word	0x0800152f
 80014c0:	0800152f 	.word	0x0800152f
 80014c4:	080014dd 	.word	0x080014dd
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	4a79      	ldr	r2, [pc, #484]	; (80016b4 <HAL_GPIO_Init+0x2b4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d2:	e02c      	b.n	800152e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	623b      	str	r3, [r7, #32]
          break;
 80014da:	e029      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	3304      	adds	r3, #4
 80014e2:	623b      	str	r3, [r7, #32]
          break;
 80014e4:	e024      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	3308      	adds	r3, #8
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e01f      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	330c      	adds	r3, #12
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e01a      	b.n	8001530 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d102      	bne.n	8001508 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001502:	2304      	movs	r3, #4
 8001504:	623b      	str	r3, [r7, #32]
          break;
 8001506:	e013      	b.n	8001530 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d105      	bne.n	800151c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	611a      	str	r2, [r3, #16]
          break;
 800151a:	e009      	b.n	8001530 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	615a      	str	r2, [r3, #20]
          break;
 8001526:	e003      	b.n	8001530 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
          break;
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x130>
          break;
 800152e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2bff      	cmp	r3, #255	; 0xff
 8001534:	d801      	bhi.n	800153a <HAL_GPIO_Init+0x13a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	e001      	b.n	800153e <HAL_GPIO_Init+0x13e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3304      	adds	r3, #4
 800153e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2bff      	cmp	r3, #255	; 0xff
 8001544:	d802      	bhi.n	800154c <HAL_GPIO_Init+0x14c>
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	e002      	b.n	8001552 <HAL_GPIO_Init+0x152>
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	3b08      	subs	r3, #8
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	210f      	movs	r1, #15
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	401a      	ands	r2, r3
 8001564:	6a39      	ldr	r1, [r7, #32]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	431a      	orrs	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80b1 	beq.w	80016e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001580:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a4c      	ldr	r2, [pc, #304]	; (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x2b8>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001598:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_GPIO_Init+0x2bc>)
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a40      	ldr	r2, [pc, #256]	; (80016c0 <HAL_GPIO_Init+0x2c0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d013      	beq.n	80015ec <HAL_GPIO_Init+0x1ec>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_GPIO_Init+0x2c4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d00d      	beq.n	80015e8 <HAL_GPIO_Init+0x1e8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3e      	ldr	r2, [pc, #248]	; (80016c8 <HAL_GPIO_Init+0x2c8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0x1e4>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3d      	ldr	r2, [pc, #244]	; (80016cc <HAL_GPIO_Init+0x2cc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_GPIO_Init+0x1e0>
 80015dc:	2303      	movs	r3, #3
 80015de:	e006      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e0:	2304      	movs	r3, #4
 80015e2:	e004      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_GPIO_Init+0x1ee>
 80015ec:	2300      	movs	r3, #0
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fe:	492f      	ldr	r1, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x2bc>)
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	492c      	ldr	r1, [pc, #176]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	600b      	str	r3, [r1, #0]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4928      	ldr	r1, [pc, #160]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001630:	4013      	ands	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	4922      	ldr	r1, [pc, #136]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	491e      	ldr	r1, [pc, #120]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001658:	4013      	ands	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	4918      	ldr	r1, [pc, #96]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4914      	ldr	r1, [pc, #80]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001680:	4013      	ands	r3, r2
 8001682:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d021      	beq.n	80016d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	490e      	ldr	r1, [pc, #56]	; (80016d0 <HAL_GPIO_Init+0x2d0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
 800169c:	e021      	b.n	80016e2 <HAL_GPIO_Init+0x2e2>
 800169e:	bf00      	nop
 80016a0:	10320000 	.word	0x10320000
 80016a4:	10310000 	.word	0x10310000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	10210000 	.word	0x10210000
 80016b0:	10120000 	.word	0x10120000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40011400 	.word	0x40011400
 80016d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_GPIO_Init+0x304>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	43db      	mvns	r3, r3
 80016dc:	4909      	ldr	r1, [pc, #36]	; (8001704 <HAL_GPIO_Init+0x304>)
 80016de:	4013      	ands	r3, r2
 80016e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	fa22 f303 	lsr.w	r3, r2, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f47f ae8e 	bne.w	8001414 <HAL_GPIO_Init+0x14>
  }
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	372c      	adds	r7, #44	; 0x2c
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	40010400 	.word	0x40010400

08001708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	807b      	strh	r3, [r7, #2]
 8001714:	4613      	mov	r3, r2
 8001716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001718:	787b      	ldrb	r3, [r7, #1]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	041a      	lsls	r2, r3, #16
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	041a      	lsls	r2, r3, #16
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	43d9      	mvns	r1, r3
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	400b      	ands	r3, r1
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	611a      	str	r2, [r3, #16]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
	...

0800176c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001778:	695a      	ldr	r2, [r3, #20]
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4013      	ands	r3, r2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d006      	beq.n	8001790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f806 	bl	800179c <HAL_GPIO_EXTI_Callback>
  }
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40010400 	.word	0x40010400

0800179c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e26c      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8087 	beq.w	80018de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d0:	4b92      	ldr	r3, [pc, #584]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d00c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017dc:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d112      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
 80017e8:	4b8c      	ldr	r3, [pc, #560]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f4:	d10b      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	4b89      	ldr	r3, [pc, #548]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d06c      	beq.n	80018dc <HAL_RCC_OscConfig+0x12c>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d168      	bne.n	80018dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e246      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x76>
 8001818:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e02e      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x98>
 800182e:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7a      	ldr	r2, [pc, #488]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a77      	ldr	r2, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0xbc>
 8001852:	4b72      	ldr	r3, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a71      	ldr	r2, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xd4>
 800186c:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6a      	ldr	r2, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b68      	ldr	r3, [pc, #416]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a67      	ldr	r2, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fca0 	bl	80011d0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc9c 	bl	80011d0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1fa      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xe4>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc8c 	bl	80011d0 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fc88 	bl	80011d0 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1e6      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x10c>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d063      	beq.n	80019b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ea:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018f6:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x18c>
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x176>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1ba      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4939      	ldr	r1, [pc, #228]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b36      	ldr	r3, [pc, #216]	; (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fc41 	bl	80011d0 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff fc3d 	bl	80011d0 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e19b      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4927      	ldr	r1, [pc, #156]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x270>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fc20 	bl	80011d0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fc1c 	bl	80011d0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e17a      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d03a      	beq.n	8001a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff fc00 	bl	80011d0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff fbfc 	bl	80011d0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e15a      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f000 faa6 	bl	8001f44 <RCC_Delay>
 80019f8:	e01c      	b.n	8001a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_RCC_OscConfig+0x274>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a00:	f7ff fbe6 	bl	80011d0 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a06:	e00f      	b.n	8001a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fbe2 	bl	80011d0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d908      	bls.n	8001a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e140      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	42420000 	.word	0x42420000
 8001a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b9e      	ldr	r3, [pc, #632]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e9      	bne.n	8001a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 80a6 	beq.w	8001b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b97      	ldr	r3, [pc, #604]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a93      	ldr	r2, [pc, #588]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b91      	ldr	r3, [pc, #580]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a8a      	ldr	r2, [pc, #552]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fba3 	bl	80011d0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff fb9f 	bl	80011d0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b64      	cmp	r3, #100	; 0x64
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e0fd      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x312>
 8001ab4:	4b7b      	ldr	r3, [pc, #492]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4a7a      	ldr	r2, [pc, #488]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6213      	str	r3, [r2, #32]
 8001ac0:	e02d      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x334>
 8001aca:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4a75      	ldr	r2, [pc, #468]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	6213      	str	r3, [r2, #32]
 8001ad6:	4b73      	ldr	r3, [pc, #460]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	4a72      	ldr	r2, [pc, #456]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	f023 0304 	bic.w	r3, r3, #4
 8001ae0:	6213      	str	r3, [r2, #32]
 8001ae2:	e01c      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	d10c      	bne.n	8001b06 <HAL_RCC_OscConfig+0x356>
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	4a6c      	ldr	r2, [pc, #432]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	f043 0304 	orr.w	r3, r3, #4
 8001af6:	6213      	str	r3, [r2, #32]
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a69      	ldr	r2, [pc, #420]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e00b      	b.n	8001b1e <HAL_RCC_OscConfig+0x36e>
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a66      	ldr	r2, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6213      	str	r3, [r2, #32]
 8001b12:	4b64      	ldr	r3, [pc, #400]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a63      	ldr	r2, [pc, #396]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d015      	beq.n	8001b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff fb53 	bl	80011d0 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff fb4f 	bl	80011d0 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0ab      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b44:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0ee      	beq.n	8001b2e <HAL_RCC_OscConfig+0x37e>
 8001b50:	e014      	b.n	8001b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b52:	f7ff fb3d 	bl	80011d0 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b58:	e00a      	b.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7ff fb39 	bl	80011d0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e095      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b70:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1ee      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d105      	bne.n	8001b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b82:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8081 	beq.w	8001c9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b98:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d061      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d146      	bne.n	8001c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bac:	4b3f      	ldr	r3, [pc, #252]	; (8001cac <HAL_RCC_OscConfig+0x4fc>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fb0d 	bl	80011d0 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff fb09 	bl	80011d0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e067      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1f0      	bne.n	8001bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d108      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	492d      	ldr	r1, [pc, #180]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a19      	ldr	r1, [r3, #32]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	430b      	orrs	r3, r1
 8001c06:	4927      	ldr	r1, [pc, #156]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c0c:	4b27      	ldr	r3, [pc, #156]	; (8001cac <HAL_RCC_OscConfig+0x4fc>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fadd 	bl	80011d0 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1a:	f7ff fad9 	bl	80011d0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e037      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x46a>
 8001c38:	e02f      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <HAL_RCC_OscConfig+0x4fc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fac6 	bl	80011d0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fac2 	bl	80011d0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e020      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x498>
 8001c66:	e018      	b.n	8001c9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e013      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d001      	beq.n	8001c9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	42420060 	.word	0x42420060

08001cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0d0      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d910      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4965      	ldr	r1, [pc, #404]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d040      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e073      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06b      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4936      	ldr	r1, [pc, #216]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7ff fa16 	bl	80011d0 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff fa12 	bl	80011d0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e053      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d210      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 0207 	bic.w	r2, r3, #7
 8001de6:	4922      	ldr	r1, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	490a      	ldr	r1, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1cc>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f974 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	0800264c 	.word	0x0800264c
 8001e7c:	2000002c 	.word	0x2000002c
 8001e80:	20000030 	.word	0x20000030

08001e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b490      	push	{r4, r7}
 8001e86:	b08a      	sub	sp, #40	; 0x28
 8001e88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e8a:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e8c:	1d3c      	adds	r4, r7, #4
 8001e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e94:	f240 2301 	movw	r3, #513	; 0x201
 8001e98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eae:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 030c 	and.w	r3, r3, #12
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d002      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d003      	beq.n	8001eca <HAL_RCC_GetSysClockFreq+0x46>
 8001ec2:	e02d      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec6:	623b      	str	r3, [r7, #32]
      break;
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	0c9b      	lsrs	r3, r3, #18
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001edc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	0c5b      	lsrs	r3, r3, #17
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f02:	fb02 f203 	mul.w	r2, r2, r3
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0e:	e004      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	623b      	str	r3, [r7, #32]
      break;
 8001f1e:	e002      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f22:	623b      	str	r3, [r7, #32]
      break;
 8001f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f26:	6a3b      	ldr	r3, [r7, #32]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc90      	pop	{r4, r7}
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	08002634 	.word	0x08002634
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	007a1200 	.word	0x007a1200
 8001f40:	003d0900 	.word	0x003d0900

08001f44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <RCC_Delay+0x34>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <RCC_Delay+0x38>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0a5b      	lsrs	r3, r3, #9
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f60:	bf00      	nop
  }
  while (Delay --);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e5a      	subs	r2, r3, #1
 8001f66:	60fa      	str	r2, [r7, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f9      	bne.n	8001f60 <RCC_Delay+0x1c>
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	2000002c 	.word	0x2000002c
 8001f7c:	10624dd3 	.word	0x10624dd3

08001f80 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001f80:	b490      	push	{r4, r7}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	0e1b      	lsrs	r3, r3, #24
 8001f94:	4413      	add	r3, r2
 8001f96:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	210f      	movs	r1, #15
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	401a      	ands	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa93 f3a3 	rbit	r3, r3
 8001fc4:	61bb      	str	r3, [r7, #24]
  return result;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	6023      	str	r3, [r4, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc90      	pop	{r4, r7}
 8001fe2:	4770      	bx	lr

08001fe4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001fe4:	b490      	push	{r4, r7}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	0e1b      	lsrs	r3, r3, #24
 8001ff8:	4413      	add	r3, r2
 8001ffa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001ffc:	6822      	ldr	r2, [r4, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	613b      	str	r3, [r7, #16]
  return result;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	2103      	movs	r1, #3
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	61bb      	str	r3, [r7, #24]
  return result;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800203e:	bf00      	nop
 8002040:	3720      	adds	r7, #32
 8002042:	46bd      	mov	sp, r7
 8002044:	bc90      	pop	{r4, r7}
 8002046:	4770      	bx	lr

08002048 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8002048:	b490      	push	{r4, r7}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	0e1b      	lsrs	r3, r3, #24
 800205c:	4413      	add	r3, r2
 800205e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002060:	6822      	ldr	r2, [r4, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	613b      	str	r3, [r7, #16]
  return result;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	2104      	movs	r1, #4
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	401a      	ands	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	61bb      	str	r3, [r7, #24]
  return result;
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	4313      	orrs	r3, r2
 80020a0:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 80020a2:	bf00      	nop
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc90      	pop	{r4, r7}
 80020aa:	4770      	bx	lr

080020ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	0a1b      	lsrs	r3, r3, #8
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	0a1b      	lsrs	r3, r3, #8
 80020c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	613b      	str	r3, [r7, #16]
  return result;
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	408b      	lsls	r3, r1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	60da      	str	r2, [r3, #12]
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	60fb      	str	r3, [r7, #12]
  return result;
 8002110:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800211a:	e040      	b.n	800219e <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800211c:	2201      	movs	r2, #1
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	409a      	lsls	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d036      	beq.n	8002198 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b07      	cmp	r3, #7
 800212e:	d806      	bhi.n	800213e <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002130:	f240 1201 	movw	r2, #257	; 0x101
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	e008      	b.n	8002150 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b08      	subs	r3, #8
 8002142:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800214e:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	461a      	mov	r2, r3
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ffa7 	bl	80020ac <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	461a      	mov	r2, r3
 8002164:	69b9      	ldr	r1, [r7, #24]
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff0a 	bl	8001f80 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d003      	beq.n	800217c <LL_GPIO_Init+0x8c>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b09      	cmp	r3, #9
 800217a:	d10d      	bne.n	8002198 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	461a      	mov	r2, r3
 8002182:	69b9      	ldr	r1, [r7, #24]
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff2d 	bl	8001fe4 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	461a      	mov	r2, r3
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff58 	bl	8002048 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1b8      	bne.n	800211c <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <LL_RCC_GetSysClkSource+0x14>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 030c 	and.w	r3, r3, #12
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	40021000 	.word	0x40021000

080021cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <LL_RCC_GetAHBPrescaler+0x14>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	40021000 	.word	0x40021000

080021e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40021000 	.word	0x40021000

080021fc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	40021000 	.word	0x40021000

08002214 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <LL_RCC_PLL_GetMainSource+0x14>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	40021000 	.word	0x40021000

0800222c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40021000 	.word	0x40021000

08002244 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <LL_RCC_PLL_GetPrediv+0x18>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c5b      	lsrs	r3, r3, #17
 800224e:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000

08002260 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002268:	f000 f820 	bl	80022ac <RCC_GetSystemClockFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f83e 	bl	80022f8 <RCC_GetHCLKClockFreq>
 800227c:	4602      	mov	r2, r0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f84c 	bl	8002324 <RCC_GetPCLK1ClockFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f858 	bl	800234c <RCC_GetPCLK2ClockFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60da      	str	r2, [r3, #12]
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80022b6:	f7ff ff7d 	bl	80021b4 <LL_RCC_GetSysClkSource>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d00c      	beq.n	80022da <RCC_GetSystemClockFreq+0x2e>
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d80e      	bhi.n	80022e2 <RCC_GetSystemClockFreq+0x36>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d002      	beq.n	80022ce <RCC_GetSystemClockFreq+0x22>
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d003      	beq.n	80022d4 <RCC_GetSystemClockFreq+0x28>
 80022cc:	e009      	b.n	80022e2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <RCC_GetSystemClockFreq+0x48>)
 80022d0:	607b      	str	r3, [r7, #4]
      break;
 80022d2:	e009      	b.n	80022e8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <RCC_GetSystemClockFreq+0x48>)
 80022d6:	607b      	str	r3, [r7, #4]
      break;
 80022d8:	e006      	b.n	80022e8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80022da:	f000 f84b 	bl	8002374 <RCC_PLL_GetFreqDomain_SYS>
 80022de:	6078      	str	r0, [r7, #4]
      break;
 80022e0:	e002      	b.n	80022e8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <RCC_GetSystemClockFreq+0x48>)
 80022e4:	607b      	str	r3, [r7, #4]
      break;
 80022e6:	bf00      	nop
  }

  return frequency;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	007a1200 	.word	0x007a1200

080022f8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002300:	f7ff ff64 	bl	80021cc <LL_RCC_GetAHBPrescaler>
 8002304:	4603      	mov	r3, r0
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 030f 	and.w	r3, r3, #15
 800230c:	4a04      	ldr	r2, [pc, #16]	; (8002320 <RCC_GetHCLKClockFreq+0x28>)
 800230e:	5cd3      	ldrb	r3, [r2, r3]
 8002310:	461a      	mov	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	40d3      	lsrs	r3, r2
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	0800264c 	.word	0x0800264c

08002324 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800232c:	f7ff ff5a 	bl	80021e4 <LL_RCC_GetAPB1Prescaler>
 8002330:	4603      	mov	r3, r0
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <RCC_GetPCLK1ClockFreq+0x24>)
 8002336:	5cd3      	ldrb	r3, [r2, r3]
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	40d3      	lsrs	r3, r2
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	0800265c 	.word	0x0800265c

0800234c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002354:	f7ff ff52 	bl	80021fc <LL_RCC_GetAPB2Prescaler>
 8002358:	4603      	mov	r3, r0
 800235a:	0adb      	lsrs	r3, r3, #11
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <RCC_GetPCLK2ClockFreq+0x24>)
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	40d3      	lsrs	r3, r2
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	0800265c 	.word	0x0800265c

08002374 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002382:	f7ff ff47 	bl	8002214 <LL_RCC_PLL_GetMainSource>
 8002386:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002394:	d003      	beq.n	800239e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002396:	e00b      	b.n	80023b0 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800239a:	607b      	str	r3, [r7, #4]
      break;
 800239c:	e00b      	b.n	80023b6 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800239e:	f7ff ff51 	bl	8002244 <LL_RCC_PLL_GetPrediv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	3301      	adds	r3, #1
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	607b      	str	r3, [r7, #4]
      break;
 80023ae:	e002      	b.n	80023b6 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80023b2:	607b      	str	r3, [r7, #4]
      break;
 80023b4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80023b6:	f7ff ff39 	bl	800222c <LL_RCC_PLL_GetMultiplicator>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0c9b      	lsrs	r3, r3, #18
 80023be:	3302      	adds	r3, #2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	003d0900 	.word	0x003d0900
 80023d4:	007a1200 	.word	0x007a1200

080023d8 <LL_USART_IsEnabled>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <LL_USART_SetStopBitsLength>:
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr

08002422 <LL_USART_SetHWFlowCtrl>:
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	615a      	str	r2, [r3, #20]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr
	...

08002448 <LL_USART_SetBaudRate>:
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	441a      	add	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	4a25      	ldr	r2, [pc, #148]	; (8002500 <LL_USART_SetBaudRate+0xb8>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	b29b      	uxth	r3, r3
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	b299      	uxth	r1, r3
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fbb2 f2f3 	udiv	r2, r2, r3
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <LL_USART_SetBaudRate+0xb8>)
 800248c:	fba3 0302 	umull	r0, r3, r3, r2
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	2064      	movs	r0, #100	; 0x64
 8002494:	fb00 f303 	mul.w	r3, r0, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	3332      	adds	r3, #50	; 0x32
 800249e:	4a18      	ldr	r2, [pc, #96]	; (8002500 <LL_USART_SetBaudRate+0xb8>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	440b      	add	r3, r1
 80024b0:	b299      	uxth	r1, r3
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4613      	mov	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	009a      	lsls	r2, r3, #2
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <LL_USART_SetBaudRate+0xb8>)
 80024c8:	fba3 0302 	umull	r0, r3, r3, r2
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	2064      	movs	r0, #100	; 0x64
 80024d0:	fb00 f303 	mul.w	r3, r0, r3
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	3332      	adds	r3, #50	; 0x32
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <LL_USART_SetBaudRate+0xb8>)
 80024dc:	fba2 2303 	umull	r2, r3, r2, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	440b      	add	r3, r1
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	609a      	str	r2, [r3, #8]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	51eb851f 	.word	0x51eb851f

08002504 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff5e 	bl	80023d8 <LL_USART_IsEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d145      	bne.n	80025ae <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800252a:	f023 030c 	bic.w	r3, r3, #12
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	6851      	ldr	r1, [r2, #4]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	4311      	orrs	r1, r2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	6912      	ldr	r2, [r2, #16]
 800253c:	430a      	orrs	r2, r1
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4619      	mov	r1, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ff57 	bl	80023fe <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff63 	bl	8002422 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fe7d 	bl	8002260 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <LL_USART_Init+0xb4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d102      	bne.n	8002574 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	e00c      	b.n	800258e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a11      	ldr	r2, [pc, #68]	; (80025bc <LL_USART_Init+0xb8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d102      	bne.n	8002582 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	e005      	b.n	800258e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <LL_USART_Init+0xbc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 800259c:	2300      	movs	r3, #0
 800259e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff4d 	bl	8002448 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40004400 	.word	0x40004400
 80025c0:	40004800 	.word	0x40004800

080025c4 <__libc_init_array>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	2600      	movs	r6, #0
 80025c8:	4d0c      	ldr	r5, [pc, #48]	; (80025fc <__libc_init_array+0x38>)
 80025ca:	4c0d      	ldr	r4, [pc, #52]	; (8002600 <__libc_init_array+0x3c>)
 80025cc:	1b64      	subs	r4, r4, r5
 80025ce:	10a4      	asrs	r4, r4, #2
 80025d0:	42a6      	cmp	r6, r4
 80025d2:	d109      	bne.n	80025e8 <__libc_init_array+0x24>
 80025d4:	f000 f822 	bl	800261c <_init>
 80025d8:	2600      	movs	r6, #0
 80025da:	4d0a      	ldr	r5, [pc, #40]	; (8002604 <__libc_init_array+0x40>)
 80025dc:	4c0a      	ldr	r4, [pc, #40]	; (8002608 <__libc_init_array+0x44>)
 80025de:	1b64      	subs	r4, r4, r5
 80025e0:	10a4      	asrs	r4, r4, #2
 80025e2:	42a6      	cmp	r6, r4
 80025e4:	d105      	bne.n	80025f2 <__libc_init_array+0x2e>
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
 80025e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ec:	4798      	blx	r3
 80025ee:	3601      	adds	r6, #1
 80025f0:	e7ee      	b.n	80025d0 <__libc_init_array+0xc>
 80025f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f6:	4798      	blx	r3
 80025f8:	3601      	adds	r6, #1
 80025fa:	e7f2      	b.n	80025e2 <__libc_init_array+0x1e>
 80025fc:	0800266c 	.word	0x0800266c
 8002600:	0800266c 	.word	0x0800266c
 8002604:	0800266c 	.word	0x0800266c
 8002608:	08002670 	.word	0x08002670

0800260c <memset>:
 800260c:	4603      	mov	r3, r0
 800260e:	4402      	add	r2, r0
 8002610:	4293      	cmp	r3, r2
 8002612:	d100      	bne.n	8002616 <memset+0xa>
 8002614:	4770      	bx	lr
 8002616:	f803 1b01 	strb.w	r1, [r3], #1
 800261a:	e7f9      	b.n	8002610 <memset+0x4>

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
